/**
 * Building on the sample skeleton for 'ui.fxml' COntroller Class generated by SceneBuilder 
 */
package comp3111.popnames;



import java.util.concurrent.TimeUnit;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.paint.Color;
import javafx.util.Duration;
import javafx.scene.control.ColorPicker;

import javafx.fxml.FXML;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.PieChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.control.Tab;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.ProgressIndicator;
import javafx.scene.control.TabPane;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.shape.Rectangle;
import javafx.scene.control.Tooltip;
import javafx.scene.Scene;


public class Controller {

	@FXML
    private Tab tabTaskZero;

    @FXML
    private TextField textfieldNameF;

    @FXML
    private TextField textfieldYear;

    @FXML
    private Button buttonRankM;

    @FXML
    private TextField textfieldNameM;

    @FXML
    private Button buttonRankF;

    @FXML
    private Button buttonTopM;

    @FXML
    private Button buttonTopF;

    @FXML
    private Button buttonSummary;

    @FXML
    private Tab tabReport1;

    @FXML
    private TextField T1TextFieldYear;

    @FXML
    private TextField T1TextFieldtopN;

    @FXML
    private CheckBox T1_displaySummary;

    @FXML
    private CheckBox T1_displayDataTable;

    @FXML
    private CheckBox T1_displayBarChart;

    @FXML
    private CheckBox T1_displayPieChart;

    @FXML
    private Button T1ButtonComputeResults;

    @FXML
    private Tab t1ConsoleTab;

    @FXML
    private TextArea textAreaConsole1;

    @FXML
    private Tab t1SummaryTab;

    @FXML
    private TextArea t1textAreaSummaryMale;

    @FXML
    private TextArea t1textAreaSummaryFemale;

    @FXML
    private Tab t1DataTableTab;

    @FXML
    private TableView<T1Names> t1ReportTableMale;

    @FXML
    private TableColumn<T1Names, Integer> t1RankMale;

    @FXML
    private TableColumn<T1Names, String> t1NameMale;

    @FXML
    private TableColumn<T1Names, Integer> t1OccurencesMale;

    @FXML
    private TableColumn<T1Names, String> t1PercentageMale;

    @FXML
    private Label t2TotFreq1;

    @FXML
    private Label t2TotOcc1;

    @FXML
    private Label t2TotPerc1;

    @FXML
    private TableView<T1Names> t1ReportTableFemale;

    @FXML
    private TableColumn<T1Names, Integer> t1RankFemale;

    @FXML
    private TableColumn<T1Names, String> t1NameFemale;

    @FXML
    private TableColumn<T1Names, Integer> t1OccurancesFemale;

    @FXML
    private TableColumn<T1Names, String> t1PercentageFemale;

    @FXML
    private Tab t1BarChartTab;

    @FXML
    private BarChart<String, Integer> t1BarChartMale;

    @FXML
    private BarChart<String, Integer> t1BarChartFemale;

    @FXML
    private Tab t1PieChartTab;

    @FXML
    private PieChart t1PieChartMale;

    @FXML
    private PieChart t1PieChartFemale;

    @FXML
    private Tab tabReport2;

    @FXML
    private CheckBox t2Summary;

    @FXML
    private CheckBox t2DataTable;

    @FXML
    private BarChart<String, Integer> t2BarChart;

    @FXML
    private CategoryAxis t2BarChartNames;

    @FXML
    private NumberAxis t2BarChartOccurances;

    @FXML
    private PieChart t2PieChart;

    @FXML
    private CheckBox t2BarChartCheck;

    @FXML
    private CheckBox t2PieChartCheck;
    
    @FXML
    private TextField t2Year1;

    @FXML
    private TextField t2Year2;

    @FXML
    private TextField t1Pop;

    @FXML
    private TextField t1Gender;

    @FXML
    private Button t2GenerateResults;

    @FXML
    private Tab t2ConsoleTab;

    @FXML
    private TextArea textAreaConsole;

    @FXML
    private Tab t2SummaryTab;

    @FXML
    private TextArea textAreaSummary;

    @FXML
    private Tab t2DataTableTab;
  
    @FXML
    private TableView<T2Names> t2ReportTable;

    @FXML
    private TableColumn<T2Names, String> t2Name;

    @FXML
    private TableColumn<T2Names, Integer> t2Frequency;

    @FXML
    private TableColumn<T2Names, Integer> t2Occurances;

    @FXML
    private TableColumn<T2Names, String> t2Percentage;

    @FXML
    private Label t2TotFreq;

    @FXML
    private Label t2TotOcc;

    @FXML
    private Label t2TotPerc;

    @FXML
    private Tab t2BarChartTab;

    @FXML
    private Tab t2PieChartTab;

    @FXML
    private Tab tabReport3;

    @FXML
    private Tab tabApp1;

    @FXML
    private TextField T4textFieldDadsName;

    @FXML
    private TextField T4textFieldDadsYOB;

    @FXML
    private TextField T4textFieldMomsName;

    @FXML
    private TextField T4textFieldMomsYOB;

    @FXML
    private Button t4ButtonT4X1;

    @FXML
    private Button t4ButtonT4X2;

    @FXML
    private Tab tabApp2;

    @FXML
    private TextField t5Name;

    @FXML
    private TextField t5Gender;

    @FXML
    private TextField t5YOB;

    @FXML
    private TextField t5GenderMate;

    @FXML
    private TextField t5Preference;

    @FXML
    private Button t5T5X1;

    @FXML
    private Button t5T5X2;

    @FXML
    private TextArea a2TextArea;
    
    @FXML
    private TabPane a2TabPane;
    
    @FXML
    private TabPane t2TabPane;

    @FXML
    private Tab a2ConsoleTab;

    @FXML
    private TextArea a2TextAreaConsole;

    @FXML
    private Button a2ViewResults;

    @FXML
    private ProgressBar t5ProgressBar;

    @FXML
    private ProgressIndicator t5ProgressIndicator;

    @FXML
    private Tab a2ResultsTab;

    @FXML
    private TextArea textAreaSummary2;

    @FXML
    private Button a2ResultsNext;

    @FXML
    private Tab a2BarChartTab;

    @FXML
    private BarChart<?, ?> a2BarChart;

    @FXML
    private CategoryAxis a2BarChartNames;

    @FXML
    private NumberAxis a2BarChartOccurances;

    @FXML
    private Button a2ResultsNext1;

    @FXML
    private Tab a2PieChart1;

    @FXML
    private PieChart t5X1PieChart;

    @FXML
    private Tab a2ConsoleTab1;

    @FXML
    private TextArea a2TextAreaConsoleX2;

    @FXML
    private Button a2EnterAdditionalData;

    @FXML
    private Tab a2AdditionalData;

    @FXML
    private Button a2ComputeResultsTX2;

    @FXML
    private Label RandomNumberLabel;

    @FXML
    private TextField t5RandInt1;

    @FXML
    private Label FavouriteColourLabel;

    @FXML
    private TextField t5RandInt2;

    @FXML
    private ColorPicker t5FavouriteColour;

    @FXML
    private Label RandomNumberLabel2;

    @FXML
    private Label AdditionalDataTitle;

    @FXML
    private Label PleaseComputeLabel;

    @FXML
    private Label ErrorLabel2;

    @FXML
    private Label ErrorLabel1;

    @FXML
    private Label ErrorLabel3;

    @FXML
    private Tab a2ResultsX2;
    
    @FXML
    private Rectangle ResultsX2Background;

    @FXML
    private Label textAreaResults;
    
    @FXML
    private Label a2ResultName;
    
    @FXML
    private Button a2ResultsNextX2;
    
    @FXML
    private Tab A2PieTab;

    @FXML
    private PieChart t2PieChartX2;

    @FXML
    private Tab tabApp3;
    
    
    /**
     *  Task Zero
     *  To be triggered by the "Summary" button on the Task Zero Tab 
     *  
     */
    @FXML
    void doSummary() {
    	int year = Integer.parseInt(textfieldYear.getText());
    	String oReport = AnalyzeNames.getSummary(year);
    	textAreaConsole.setText(oReport);
    }
    /**
     *  Task Zero
     *  To be triggered by the "Rank (female)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doRankF() {
    	String oReport = "";
    	String iNameF = textfieldNameF.getText();
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	int oRank = AnalyzeNames.getRank(iYear, iNameF, "F");
    	if (oRank == -1)
    		oReport = String.format("The name %s (female) has not been ranked in the year %d.\n", iNameF, iYear);
    	else
    		oReport = String.format("Rank of %s (female) in year %d is #%d.\n", iNameF, iYear, oRank);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero
     *  To be triggered by the "Rank (male)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doRankM() {
    	String oReport = "";
    	String iNameM = textfieldNameM.getText();
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	int oRank = AnalyzeNames.getRank(iYear, iNameM, "M");
    	if (oRank == -1)
    		oReport = String.format("The name %s (male) has not been ranked in the year %d.\n", iNameM, iYear);
    	else
    		oReport = String.format("Rank of %s (male) in year %d is #%d.\n", iNameM, iYear, oRank);
    	textAreaConsole.setText(oReport);
    }


    /**
     *  Task Zero
     *  To be triggered by the "Top 5 (female)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doTopF() {
    	String oReport = "";
    	final int topN = 5;
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	oReport = String.format("Top %d most popular names (female) in the year %d:\n", topN, iYear);
    	for (int i=1; i<=topN; i++)
    		oReport += String.format("#%d: %s\n", i, AnalyzeNames.getName(iYear, i, "F"));
    	textAreaConsole.setText(oReport);
    }


    /**
     *  Task Zero
     *  To be triggered by the "Top 5 (male)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doTopM() {
    	String oReport = "";
    	final int topN = 5;
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	oReport = String.format("Top %d most popular names (male) in the year %d:\n", topN, iYear);
    	for (int i=1; i<=topN; i++)
    		oReport += String.format("#%d: %s\n", i, AnalyzeNames.getName(iYear, i, "M"));
    	textAreaConsole.setText(oReport);
    }
    @FXML
    void t1ComputeResults() {
    	t1ConsoleTab.setStyle("-fx-text-base-color: black;");
    	t1SummaryTab.setDisable(true);
    	t1DataTableTab.setDisable(true);
    	t1BarChartTab.setDisable(true);
    	t1PieChartTab.setDisable(true);
    	t1ReportTableMale.getItems().clear();
    	t1ReportTableFemale.getItems().clear();
    	t1textAreaSummaryMale.setText("");
		t1textAreaSummaryFemale.setText("");
		t1BarChartMale.getData().clear();
		t1BarChartFemale.getData().clear();
		t1PieChartMale.getData().clear();
		t1PieChartFemale.getData().clear();
    	String oReport = "";
    	String year = T1TextFieldYear.getText();
    	String input_avaliable_error = "" ;
    	if(year == "") {
    		input_avaliable_error += "The year is blank! Please enter year \n";
    	}
    	String n = T1TextFieldtopN.getText();
    	if(n == "") {
    		input_avaliable_error += "The top N most popular names to reported is blank! Please enter a value \n";
    	}
    	
    	boolean summary_box = T1_displaySummary.isSelected();
    	boolean dt_box = T1_displayDataTable.isSelected();
    	boolean bar_chart_box = T1_displayBarChart.isSelected();
    	boolean pie_chart_box = T1_displayPieChart.isSelected();
    	boolean boxes_checked = true ;
    	if((summary_box == false)&&(dt_box == false)&&(bar_chart_box == false)&&(pie_chart_box == false)) {
    		input_avaliable_error += ("Please Check or Select at Least One Form of Data Representation and Try Again!");
    		boxes_checked = false ; 
    	}
    	if((year == "")||(n=="")||(boxes_checked==false)) {
    		textAreaConsole1.setText(input_avaliable_error);
    		t1ConsoleTab.setStyle("-fx-text-base-color: red;");
    		return;
    	}
    	String validation_error = "" ; 
    	boolean year_validated = false ;
    	int int_year = 0 ;
    	try {
    		int_year = Integer.parseInt(year);
    		if((int_year >=1880)&&(int_year <= 2019)) {
    			year_validated = true ; 
    		}
    		else {
    			validation_error += "Enter data value in the range for the Year. It too small or too large! \n";
    		}
    		
    	}
    	catch (Exception e) {
    		validation_error += "Enter the Correct Datatype for the Year. Enter a Number! \n";
    	}
    	boolean n_validated = false ;
    	int int_n = 0 ;
    	try {
    		int_n = Integer.parseInt(n);
    		if((int_n >=1)&&(int_n <= 10)) {
    			n_validated = true ; 
    		}
    		else {
    			validation_error += "Enter data value in the range for the N. It too small or too large! \n";
    		}
    		
    	}
    	catch (Exception e) {
    		validation_error += "Enter the Correct Datatype for the N. Enter a Number! \n";
    	}
    	if((!year_validated)||(!n_validated)) {
    		textAreaConsole1.setText(validation_error);
    		t1ConsoleTab.setStyle("-fx-text-base-color: red;");
    		return; 
    	}
    	//oReport = String.format("Year %s\n", year);
    	//oReport += String.format("N %s\n", n);
    	//oReport += String.format("Summary box %b\n", summary_box);
    	//oReport += String.format("Data table %b\n" , dt_box);
    	//oReport += String.format("Bar Chart box %b\n", bar_chart_box);
    	//oReport += String.format("Pie Chart Box %b\n" , pie_chart_box);
    	//oReport += String.format("Lets implement the charts!\n" );
    	//textAreaConsole.setText(oReport);
    	textAreaConsole1.setText("Select the repective Tabs to Check the Results");
    	AnalyzeNames analyze_obj = new AnalyzeNames(); 
    	String []  top_male_names = new String[int_n];
    	String []  top_female_names = new String[int_n];
    	int [] top_male_occurences = new int[int_n];
    	int [] top_female_occurences = new int[int_n];
    	String []  top_male_percentages = new String[int_n];
    	String [] top_female_percentages = new String[int_n];
    	int [] top_male_ranks = new int[int_n];
    	int [] top_female_ranks = new int[int_n];
    	int all_males = 0 ; 
    	int all_females = 0 ;
    	all_males = analyze_obj.getTotalMales(int_year);
    	all_females = analyze_obj.getTotalFemales(int_year);
    	String male_gender = "M";
    	String female_gender = "F";
    	String test_output = "";
    	
    	for (int i=0 ; i<int_n ; i++) {
    		top_male_ranks[i] = i+1;
    		top_female_ranks[i] = i+1 ; 
    		top_male_names[i] = analyze_obj.getName(int_year , i+1 , male_gender);
    		top_female_names[i] = analyze_obj.getName(int_year , i+1 , female_gender);
    		top_male_occurences[i] = analyze_obj.getOccurance(int_year, top_male_names[i], male_gender);
    		System.out.println(top_male_occurences[i]);
    		top_female_occurences[i] = analyze_obj.getOccurance(int_year, top_female_names[i], female_gender);
    		float mp = ((float)top_male_occurences[i]/all_males)*100;
    		float fp = ((float)top_female_occurences[i]/all_females)*100;
    		top_female_percentages[i] = String.format("%.2f%%", fp);
    		top_male_percentages[i] = String.format("%.2f%%", mp);
    	}
    	for(int i= 0 ; i<int_n ; i++) {
    		test_output+= String.format("%d %s %d %s\n",top_male_ranks[i] ,top_male_names[i], top_male_occurences[i] , top_male_percentages[i]);
    	}
    	for(int i= 0 ; i<int_n ; i++) {
    		test_output+= String.format("%d %s %d %s\n",top_female_ranks[i] ,top_female_names[i], top_female_occurences[i] , top_female_percentages[i]);
    	}
    	System.out.println(test_output);
    	t1SummaryTab.setDisable(!summary_box);
    	t1DataTableTab.setDisable(!dt_box);
    	t1BarChartTab.setDisable(!bar_chart_box);
    	t1PieChartTab.setDisable(!pie_chart_box);
    	T1Names []  male_data = new T1Names[int_n];
		T1Names [] female_data = new T1Names[int_n];
		for(int i=0 ; i <int_n ; i++) {
    		male_data[i] = new T1Names(top_male_ranks[i], top_male_names[i] , top_male_occurences[i] , top_male_percentages[i]);
    		female_data[i] = new T1Names(top_female_ranks[i], top_female_names[i] , top_female_occurences[i] , top_female_percentages[i]);
    	}
		int total_top_males = 0 ; 
    	int total_top_females = 0 ;
    	for(int i = 0 ; i<int_n ; i++) {
    		total_top_males += male_data[i].getOccurences();
    		total_top_females += female_data[i].getOccurences();
    	}
    	if(summary_box) {
			String male_result = String.format("%s is the most popular name with the number of occurrences of %d, which represents %s of total male births in %d.", top_male_names[0], top_male_occurences[0] , top_male_percentages[0], int_year);
			String female_result = String.format("%s is the most popular name with the number of occurrences of %d, which represents %s of total male births in %d.", top_female_names[0], top_female_occurences[0] , top_female_percentages[0], int_year);
			t1textAreaSummaryMale.setText(male_result);
			t1textAreaSummaryFemale.setText(female_result);
		}
    	
    	if(dt_box) {
    		
    		t1RankMale.setCellValueFactory(new PropertyValueFactory<T1Names,Integer>("rank"));
	    	t1NameMale.setCellValueFactory(new PropertyValueFactory<T1Names,String>("name"));
	    	t1OccurencesMale.setCellValueFactory(new PropertyValueFactory<T1Names,Integer>("occurences"));
	    	t1PercentageMale.setCellValueFactory(new PropertyValueFactory<T1Names,String>("percentage"));
	    	t1RankFemale.setCellValueFactory(new PropertyValueFactory<T1Names,Integer>("rank"));
	    	t1NameFemale.setCellValueFactory(new PropertyValueFactory<T1Names,String>("name"));
	    	t1OccurancesFemale.setCellValueFactory(new PropertyValueFactory<T1Names,Integer>("occurences"));
	    	t1PercentageFemale.setCellValueFactory(new PropertyValueFactory<T1Names,String>("percentage"));
	    	t1ReportTableMale.setItems(t1getNameData(male_data));
	    	t1ReportTableFemale.setItems(t1getNameData(female_data));
	    	
    	}
    	if(bar_chart_box) {
    		t1BarChartMale.setTitle(String.format("Top %d Names (male) in %d" ,  int_n , int_year));
    		XYChart.Series<String, Integer> set_male = new XYChart.Series<>();
    		set_male.setName("Male Occurences"); 
    		for (T1Names one_name : male_data) {
				if(one_name!=null) {
					set_male.getData().add(new XYChart.Data<>(one_name.getName(), one_name.getOccurences()));
				}
			}
			t1BarChartFemale.setTitle(String.format("Top %d Names (female) in %d" ,  int_n , int_year));
			XYChart.Series<String, Integer> set_female = new XYChart.Series<>();
			set_female.setName("Female Occurences");
			for (T1Names one_name : female_data) {
				if(one_name!=null) {
					set_female.getData().add(new XYChart.Data<>(one_name.getName(), one_name.getOccurences()));
				}
			}
			t1BarChartMale.getData().addAll(set_male);
			t1BarChartFemale.getData().addAll(set_female);
    	}
    	if(pie_chart_box) {
			ObservableList<PieChart.Data> pieChartDataMale= FXCollections.observableArrayList();
			for(T1Names one_name : male_data) {
				if(one_name!=null) {
					pieChartDataMale.add(new PieChart.Data(one_name.getName(), (float)(one_name.getOccurences()*100.0/total_top_males)));
				}
			}
			t1PieChartMale.setData(pieChartDataMale);
			t1PieChartMale.setStartAngle(90);
			ObservableList<PieChart.Data> pieChartDataFemale= FXCollections.observableArrayList();
			for(T1Names one_name : female_data) {
				if(one_name!=null) {
					pieChartDataFemale.add(new PieChart.Data(one_name.getName(), (float)(one_name.getOccurences()*100.0/total_top_females)));
				}
			}
			t1PieChartFemale.setData(pieChartDataFemale);
			t1PieChartFemale.setStartAngle(90);
		}
    }
    
    public ObservableList<T1Names> t1getNameData(T1Names [] names) {
		ObservableList<T1Names> Names = FXCollections.observableArrayList();
		
		for(T1Names one_name : names) {
			if(one_name!=null) {
				Names.add(one_name);
			}
		}
		return Names;
	}

    @FXML
    void t4_computeT4X1() {
    	textAreaConsole.setText("Testing T4X1");
    }

    @FXML
    void t4_computeT4X2() {
    	textAreaConsole.setText("Testing T4X2");
    }

    @FXML
    void t5_computeT5X1() {
//    	a2ResultsTab.setText("ENTER RESULTS TAB\n");
//    	a2ResultsTab.setDisable(false);
    	String iName = t5Name.getText();
    	String iGender = t5Gender.getText();
    	int iYOB = Integer.parseInt(t5YOB.getText());
    	String iGenderMate = t5GenderMate.getText();
    	String iPreference = t5Preference.getText();
    	
    	String oReport = "";
//    	oReport += AnalyzeNames.getCompatiblePairT5X1(iGenderMate, iYOB);
    	oReport+=String.format("Your compatible pair is most likely called %s.\n", AnalyzeNames.getName(iYOB, 1, iGenderMate));
    	oReport+=String.format("To view the Top 5 compatible pairs suitable for you and their probabilities, please press the next button...");
    	a2ResultsNext.setVisible(true);
    	textAreaSummary2.setText(oReport);
    }
    
    @FXML
    void t5_initT5X1() {
    	t5ProgressBar.setVisible(false);
    	t5ProgressIndicator.setVisible(false);
    	a2TextAreaConsole.clear();
    	a2ViewResults.setVisible(false);
    	a2TabPane.getSelectionModel().select(a2ConsoleTab);
    	t5X1PieChart.getData().clear();
    	t5X1PieChart.setAnimated(false);
    	String oReport ="";
    	boolean err = false;
    	
    	String iName = "";
    	try {
    		if(t5Name.getText() =="") {
    			throw new Exception("Error: iName has not been inputted\n");
    		}
    	}
    	catch (Exception e) {
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	boolean isUserMale = false;
    	String iGender = t5Gender.getText();
    	try {
    		if(iGender =="") {
    			throw new Exception("Error: iGender has not been inputted\n");
    		}
    		if(iGender.contentEquals("M")) {
    			isUserMale = true;
    		}
    		else if (iGender.contentEquals("F")) {
    			isUserMale = false;
    		}
    		else {
    			throw new Exception("Invalid Gender: iGender can either be 'M' or 'F'\n");
    		}
    	}
    	catch (Exception e) {
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	int iYOB=0;
    	try {
    		if(t5YOB.getText() =="") {
    			throw new Exception("Error: iYOB has not been inputted\n");
    		}
    		iYOB = Integer.parseInt(t5YOB.getText());
    		if(iYOB < 1880 || iYOB > 2019) {
    			throw new Exception("Invalid iYOB: Year Out of Range\n");
    		}
    	}
    	catch (NumberFormatException e) {
    		oReport += "Please input valid iYOB (Integer Value between 1880 and 2019)\n";
    		err=true;
    	}
    	catch (Exception e) {
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	boolean isMateMale = false;
    	String iGenderMate = t5GenderMate.getText();
    	try {
    		if(iGenderMate =="") {
    			throw new Exception("Error: iGenderMate has not been inputted\n");
    		}
    		if(iGenderMate.contentEquals("M")) {
    			isMateMale = true;
    		}
    		else if (iGenderMate.contentEquals("F")) {
    			isMateMale = false;
    		}
    		else {
    			throw new Exception("Invalid iGenderMate: iGenderMate can either be 'M' or 'F'\n");
    		}
    	}
    	catch (Exception e) {
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	boolean isPreferenceYounger = false;
    	String iPreference = t5Preference.getText();
    	try {
    		if(iPreference =="") {
    			throw new Exception("Error: iPreference has not been inputted\n");
    		}
    		if(iPreference.contentEquals("Younger")) {
    			isPreferenceYounger = true;
    		}
    		else if (iPreference.contentEquals("Older")) {
    			isPreferenceYounger = false;
    		}
    		else {
    			throw new Exception("Invalid iPreference: iPreference can either be \"Younger\" or \"Older\" \n");
    		}
    	}
    	catch (Exception e) {
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	a2TextAreaConsole.setText(oReport);
    	if(!err) {

    	    new Thread(()->{ //use another thread so long process does not block gui
	            String text = "";
    	    	for(double i=0;i<=100;i++)   {
    	            if(i == 0 ){
//    	        		text="";
    	        		text+="Welcome to Prediction on Names for Compatible Pairs Application!\n\n";
    	        		text+="Our patented prediction algorithms will be used to formulate suitable predictions\n";
    	        		text+="Processing results now...\n";
    	        		t5ProgressBar.setProgress(0.0);
        	            t5ProgressIndicator.setProgress(0.0);
        	            t5ProgressBar.setVisible(true);
        	            t5ProgressIndicator.setVisible(true);
    	        		a2TextAreaConsole.setText(text);
    	            } else {
    	        		t5ProgressBar.setProgress(i/100.0);
        	            t5ProgressIndicator.setProgress(i/100.0);
    	            }

    	            //update gui using fx thread
//    	            final String text2 = text;
    	            
//    	            Platform.runLater(() -> );
    	            try {Thread.sleep(100);} catch (InterruptedException ex) { ex.printStackTrace();}
    	        }
        	    a2ViewResults.setVisible(true);

    	    }).start();
    		
    	}
    	
    }
    
    @FXML
    void a2ResultsNext() {
    	t5X1PieChart.getData().clear();
    	a2TabPane.getSelectionModel().select(a2PieChart1);
    }

    @FXML
    void a2ViewResults() {
    	textAreaSummary.clear();
    	a2TabPane.getSelectionModel().select(a2ResultsTab);
    }

    @FXML
    void t5_computeT5X2() {
    	a2TabPane.getSelectionModel().select(a2ConsoleTab1);
    	String oReport ="";
    	boolean err = false;
    	
    	String iName = "";
    	try {
    		if(t5Name.getText() =="") {
    			throw new Exception("Error: iName has not been inputted\n");
    		}
    	}
    	catch (Exception e) {
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	boolean isUserMale = false;
    	String iGender = t5Gender.getText();
    	try {
    		if(iGender =="") {
    			throw new Exception("Error: iGender has not been inputted\n");
    		}
    		if(iGender.contentEquals("M")) {
    			isUserMale = true;
    		}
    		else if (iGender.contentEquals("F")) {
    			isUserMale = false;
    		}
    		else {
    			throw new Exception("Invalid Gender: iGender can either be 'M' or 'F'\n");
    		}
    	}
    	catch (Exception e) {
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	int iYOB=0;
    	try {
    		if(t5YOB.getText() =="") {
    			throw new Exception("Error: iYOB has not been inputted\n");
    		}
    		iYOB = Integer.parseInt(t5YOB.getText());
    		if(iYOB < 1880 || iYOB > 2019) {
    			throw new Exception("Invalid iYOB: Year Out of Range\n");
    		}
    	}
    	catch (NumberFormatException e) {
    		oReport += "Please input valid iYOB (Integer Value between 1880 and 2019)\n";
    		err=true;
    	}
    	catch (Exception e) {
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	boolean isMateMale = false;
    	String iGenderMate = t5GenderMate.getText();
    	try {
    		if(iGenderMate =="") {
    			throw new Exception("Error: iGenderMate has not been inputted\n");
    		}
    		if(iGenderMate.contentEquals("M")) {
    			isMateMale = true;
    		}
    		else if (iGenderMate.contentEquals("F")) {
    			isMateMale = false;
    		}
    		else {
    			throw new Exception("Invalid iGenderMate: iGenderMate can either be 'M' or 'F'\n");
    		}
    	}
    	catch (Exception e) {
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	boolean isPreferenceYounger = false;
    	String iPreference = t5Preference.getText();
    	try {
    		if(iPreference =="") {
    			throw new Exception("Error: iPreference has not been inputted\n");
    		}
    		if(iPreference.contentEquals("Younger")) {
    			isPreferenceYounger = true;
    		}
    		else if (iPreference.contentEquals("Older")) {
    			isPreferenceYounger = false;
    		}
    		else {
    			throw new Exception("Invalid iPreference: iPreference can either be \"Younger\" or \"Older\" \n");
    		}
    	}
    	catch (Exception e) {
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	if(!err) {
    		oReport+="Welcome to Prediction on Names for Compatible Pairs Application!\n\n";
    		oReport+="In order to generate suitable predictions using our patented formula, please enter additional data.\n";
    		oReport+="Please press the Enter Additional Data Button Below...\n";
    		a2EnterAdditionalData.setVisible(true);
    	}
    	a2TextAreaConsoleX2.setText(oReport);
    	
    }
    
    @FXML
    void t5_computeTop5() {
    	int int_n = 5;
    	int int_year = Integer.parseInt(t5YOB.getText());
    	AnalyzeNames analyze_obj = new AnalyzeNames(); 
    	String []  top_male_names = new String[int_n];
    	String []  top_female_names = new String[int_n];
    	int [] top_male_occurences = new int[int_n];
    	int [] top_female_occurences = new int[int_n];
    	String []  top_male_percentages = new String[int_n];
    	String [] top_female_percentages = new String[int_n];
    	int [] top_male_ranks = new int[int_n];
    	int [] top_female_ranks = new int[int_n];
    	int all_males = 0 ; 
    	int all_females = 0 ;
    	all_males = analyze_obj.getTotalMales(int_year);
    	all_females = analyze_obj.getTotalFemales(int_year);
    	String male_gender = "M";
    	String female_gender = "F";
    	String test_output = "";
    	
    	for (int i=0 ; i<int_n ; i++) {
    		top_male_ranks[i] = i+1;
    		top_female_ranks[i] = i+1 ; 
    		top_male_names[i] = analyze_obj.getName(int_year , i+1 , male_gender);
    		top_female_names[i] = analyze_obj.getName(int_year , i+1 , female_gender);
    		top_male_occurences[i] = analyze_obj.getOccurance(int_year, top_male_names[i], male_gender);
    		System.out.println(top_male_occurences[i]);
    		top_female_occurences[i] = analyze_obj.getOccurance(int_year, top_female_names[i], female_gender);
    		float mp = ((float)top_male_occurences[i]/all_males)*100;
    		float fp = ((float)top_female_occurences[i]/all_females)*100;
    		top_female_percentages[i] = String.format("%.2f%%", fp);
    		top_male_percentages[i] = String.format("%.2f%%", mp);
    	}
    	for(int i= 0 ; i<int_n ; i++) {
    		test_output+= String.format("%d %s %d %s\n",top_male_ranks[i] ,top_male_names[i], top_male_occurences[i] , top_male_percentages[i]);
    	}
    	for(int i= 0 ; i<int_n ; i++) {
    		test_output+= String.format("%d %s %d %s\n",top_female_ranks[i] ,top_female_names[i], top_female_occurences[i] , top_female_percentages[i]);
    	}
    	System.out.println(test_output);
    	T1Names []  male_data = new T1Names[int_n];
		T1Names [] female_data = new T1Names[int_n];
		for(int i=0 ; i <int_n ; i++) {
    		male_data[i] = new T1Names(top_male_ranks[i], top_male_names[i] , top_male_occurences[i] , top_male_percentages[i]);
    		female_data[i] = new T1Names(top_female_ranks[i], top_female_names[i] , top_female_occurences[i] , top_female_percentages[i]);
    	}
		int total_top_males = 0 ; 
    	int total_top_females = 0 ;
    	for(int i = 0 ; i<int_n ; i++) {
    		total_top_males += male_data[i].getOccurences();
    		total_top_females += female_data[i].getOccurences();
    	}
    	
    	if(t5GenderMate.getText().contentEquals("M")) {
			ObservableList<PieChart.Data> pieChartDataMale= FXCollections.observableArrayList();
			for(T1Names one_name : male_data) {
				if(one_name!=null) {
					pieChartDataMale.add(new PieChart.Data(one_name.getName(), (float)(one_name.getOccurences()*100.0/total_top_males)));
				}
			}
			t5X1PieChart.setData(pieChartDataMale);
			t5X1PieChart.setStartAngle(90);
			
			t5X1PieChart.getData().forEach(data -> {
			    String percentage = String.format("%.1f%%", (data.getPieValue()));
			    Tooltip toolTip = new Tooltip(percentage);
			    Tooltip.install(data.getNode(), toolTip);
			});
			
    	} else {
			ObservableList<PieChart.Data> pieChartDataFemale= FXCollections.observableArrayList();
			for(T1Names one_name : female_data) {
				if(one_name!=null) {
					pieChartDataFemale.add(new PieChart.Data(one_name.getName(), (float)(one_name.getOccurences()*100.0/total_top_females)));
				}
			}
			t5X1PieChart.setData(pieChartDataFemale);
			t5X1PieChart.setStartAngle(90);
    	}
    	
    }
    
    @FXML
    void a2ComputeResultsTX2() {
    	ErrorLabel1.setVisible(false);
    	ErrorLabel2.setVisible(false);
    	ErrorLabel3.setVisible(false);
    	
    	
    	boolean isPreferenceYounger = false;
    	String iPreference = t5Preference.getText();
		if(iPreference.contentEquals("Younger")) {
			isPreferenceYounger = true;
		}
		else if (iPreference.contentEquals("Older")) {
			isPreferenceYounger = false;
		}
		
    	boolean err = false;
    	
    	int randInt1=0;
    	try {
    		if(t5RandInt1.getText() =="") {
    			throw new Exception("Error: Random Number has\n not been inputted\n");
    		}
    		randInt1 = Integer.parseInt(t5RandInt1.getText());
    		if(randInt1 < 1 || randInt1 > 9) {
    			throw new Exception("Invalid Random Number:\n Number Out of Range\n");
    		}
    	}
    	catch (NumberFormatException e) {
    		ErrorLabel1.setVisible(true);
    		ErrorLabel1.setText(String.format("Please input valid Random Number\n(Integer Value between 1 and 9)\n"));
    		err=true;
    	}
    	catch (Exception e) {
    		ErrorLabel1.setVisible(true);
    		ErrorLabel1.setText(e.getMessage());
    		err=true;
    	}
    	

//    	Color favColor = t5FavouriteColour.getValue();
//		if(favColor.getBrightness() > 0.85 && favColor.getSaturation() <0.15) {
//			err=true;
//			ErrorLabel2.setVisible(true);
//			ErrorLabel2.setText("Colour too light,\n Please choose a darker Colour");
//		}
    	
    	
    	int randInt2=0;
    	try {
    		if(t5RandInt2.getText() =="") {
    			throw new Exception("Error: Random Number has\n not been inputted\n");
    		}
    		randInt2 = Integer.parseInt(t5RandInt2.getText());
    		if(randInt2 < 1 || randInt2 > 50) {
    			throw new Exception("Invalid Random Number:\n Number Out of Range\n");
    		}
    	}
    	catch (NumberFormatException e) {
    		ErrorLabel3.setVisible(true);
    		ErrorLabel3.setText(String.format("Please input valid Random Number\n(Integer Value between 1 and 30)\n"));
    		err=true;
    	}
    	catch (Exception e) {
    		ErrorLabel3.setVisible(true);
    		ErrorLabel3.setText(e.getMessage());
    		err=true;
    	}
    	
    	if(!err) {
    		a2TabPane.getSelectionModel().select(a2ResultsX2);
    	}

    }

    @FXML
    void a2EnterAdditionalData() {

    	ErrorLabel1.setVisible(false);
    	ErrorLabel2.setVisible(false);
    	ErrorLabel3.setVisible(false);
    	
//    	boolean isPreferenceYounger = false;
//    	String iPreference = t5Preference.getText();
//		if(iPreference.contentEquals("Younger")) {
//			isPreferenceYounger = true;
//		}
//		else if (iPreference.contentEquals("Older")) {
//			isPreferenceYounger = false;
//		}
//		
//		int RandomRange = 1;
//		if(isPreferenceYounger) {
//			RandomRange = 2019-Integer.parseInt(t5YOB.getText())+1;
//		} else {
//			RandomRange = Integer.parseInt(t5YOB.getText()) - 1880 + 1;
//		}
//    	RandomNumberLabel.setText(String.format("Enter Random Number between 1 and %d:", RandomRange));
    	a2TabPane.getSelectionModel().select(a2AdditionalData);
    
    }
    
    @FXML
    void a2ResultsNextX2() {
    	a2TabPane.getSelectionModel().select(A2PieTab);
    }
    

    @FXML
    void a2ResultsX2() {
    	T2Names.resetbirthCount();

		t2PieChartX2.setAnimated(false);
    	
    	boolean isPreferenceYounger = false;
    	String iPreference = t5Preference.getText();
		int RandInt1 = Integer.parseInt(t5RandInt1.getText());
		int RandInt2 = Integer.parseInt(t5RandInt2.getText());
		int iYOB = Integer.parseInt(t5YOB.getText());
		String oReport = "";
		
		Color favColor = t5FavouriteColour.getValue();
		textAreaResults.setTextFill(favColor);
		a2ResultName.setTextFill(favColor);
		Color contrastingColour = new Color(1.0-favColor.getRed(),1.0-favColor.getGreen(), 1.0-favColor.getBlue(), 1.0);
    	
    	ResultsX2Background.setFill(contrastingColour);
		
		
		RandInt2 = ((RandInt1 * RandInt2 + iYOB)/20)%30 + 1;
		RandInt1+=2;
//		int ending_Year;
		T2Names [] result = null;
		if(iPreference.contentEquals("Younger")) {
			if(iYOB+RandInt1 > 2019) {
				iYOB-=2;
				RandInt1 = 2019-iYOB;
			}
//			oReport += String.format("Starting Year: %d, Ending Year: %d, K: %d\n", iYOB, iYOB+RandInt1, RandInt2 );
			result = AnalyzeNames.getKthPopularNames(iYOB, iYOB+RandInt1, RandInt2, t5GenderMate.getText());
		}
		else if (iPreference.contentEquals("Older")) {
//			oReport += String.format("Starting Year: %d, Ending Year: %d, K: %d\n", iYOB-RandInt1, iYOB, RandInt2);
			result = AnalyzeNames.getKthPopularNames(iYOB-RandInt1, iYOB, RandInt2, t5GenderMate.getText());
		}
//		result[0].setPercentage();
    	oReport += String.format("Our Patented Formula has been applied and its results have been processed...\n");
    	oReport += String.format("Your compatible pair will most likely be called ...\n\n\n\n");
    	oReport += String.format("To view the probabilities of your most likely compatible pair, please press the Next button...\n");
    	textAreaResults.setText(oReport);
    	a2ResultName.setText(result[0].getName());
    	
    	
		ObservableList<PieChart.Data> pieChartData= FXCollections.observableArrayList();
		for(T2Names nam : result) {
			if(nam!=null) {
				pieChartData.add(new PieChart.Data(nam.getName(), (float)(nam.getOccurances()*100.0/T2Names.getbirthCount())));
			}
		}
		t2PieChartX2.setData(pieChartData);
		t2PieChartX2.setStartAngle(90);
		t2PieChartX2.layout();
		t2PieChartX2.getData().forEach(data -> {
		    String percentage = String.format("%.1f%%", (data.getPieValue()));
		    Tooltip toolTip = new Tooltip(percentage);
		    Tooltip.install(data.getNode(), toolTip);
		});
    	
    }
    

    @FXML
    void t2GenerateResults() {
    	//Reset T2Names Static Variable
    	T2Names.resetbirthCount();
    	//Reset bar chart data set
		t2BarChart.getData().clear();
		t2BarChart.setAnimated(false);
		t2PieChart.setAnimated(false);
    	
//    	textAreaConsole.setText("Testing T2");
    	String oReport = "";
    	boolean err = false;
    	
    	//Validate and Input Starting Year
    	int starting_Year=0;
    	try {
    		if(t2Year1.getText() =="") {
    			throw new Exception("Error: Starting Year of Interest has not been inputted\n");
    		}
    		starting_Year = Integer.parseInt(t2Year1.getText());
    		if(starting_Year < 1880 || starting_Year > 2019) {
    			throw new Exception("Invalid Starting Year of Interest: Year Out of Range\n");
    		}
    	}
    	catch (NumberFormatException e) {
    		oReport += "Please input valid Starting Year of Interst (Integer Value between 1880 and 2019)\n";
    		err=true;
    	}
    	catch (Exception e) {
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	//Validate and Input Ending Year
    	
    	int ending_Year = 0;
    	try {
    		if(t2Year2.getText() =="") {
    			throw new Exception("Error: Ending Year of Interest has not been inputted\n");
    		}
    		ending_Year = Integer.parseInt(t2Year2.getText());
    		if(ending_Year < 1880 || ending_Year > 2019) {
    			throw new Exception("Invalid Ending Year of Interest: Year Out of Range\n");
    		}
    		else if (ending_Year<starting_Year) {
    			throw new Exception("Invalid Ending Year of Interest: Ending Year of Interest is less than Starting Year of Interest\n");
    		}
    	}
    	catch (NumberFormatException e) {
    		oReport += "Please input valid Ending Year of Interst (Integer Value between 1880 and 2019)\n";
    		err=true;
    	}
    	catch (Exception e) {
    		oReport += e.getMessage();
    		err=true;
    	}
    	

    	//Validate and Input K
    	
    	int k = 0;
    	try {
    		if(t1Pop.getText() =="") {
    			throw new Exception("Error: K-th Popular Name to Be Reported has not been inputted\n");
    		}
    		k = Integer.parseInt(t1Pop.getText());
    		if(k < 1 || k > 1000) {
    			throw new Exception("Invalid K-th Popular Name to Be Reported: K-th Value out of range\n");
    		}
    	}
    	catch (Exception e) {
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	//Validate and Input Gender

		String genderOut = "";
    	String gender = t1Gender.getText();
    	try {
    		if(gender =="") {
    			throw new Exception("Error: Gender has not been inputted\n");
    		}
    		if(gender.contentEquals("M")) {
    			genderOut="boys";
    		}
    		else if (gender.contentEquals("F")) {
    			genderOut="girls";
    		}
    		else {
    			throw new Exception("Invalid Gender: Gender can either be 'M' or 'F'\n");
    		}
    	}
    	catch (Exception e) {
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	//Validate and Input Report Selection
    	
    	boolean summary = t2Summary.isSelected();
    	boolean datatable = t2DataTable.isSelected();
    	boolean barchart = t2BarChartCheck.isSelected();
    	boolean piechart = t2PieChartCheck.isSelected();
    
    	if(!(summary | datatable | barchart | piechart)) {
    		oReport += "Error: No Data Reporting Method has been Chosen (Please select required reports using the checkbox)\n";
    		err=true;
    	}
    	T2Names [] result = null;
    	if(!err) {
        	t2SummaryTab.setDisable(!summary);
        	t2DataTableTab.setDisable(!datatable);
        	t2BarChartTab.setDisable(!barchart);
        	t2PieChartTab.setDisable(!piechart);
	    	oReport += String.format("Please view requested Reports in respective tab(s)");
	    	result = AnalyzeNames.getKthPopularNames(starting_Year, ending_Year, k, gender);

	    	t2Name.setCellValueFactory(new PropertyValueFactory<T2Names,String>("name"));
	    	t2Frequency.setCellValueFactory(new PropertyValueFactory<T2Names,Integer>("frequency"));
	    	t2Occurances.setCellValueFactory(new PropertyValueFactory<T2Names,Integer>("occurances"));
	    	t2Percentage.setCellValueFactory(new PropertyValueFactory<T2Names,String>("percentage"));
	    	if(result!=null) {
	        	t2ConsoleTab.setStyle("-fx-text-base-color: black;");
	    		if(summary) {
	    			String summ="";
	    			summ+= String.format("%s has held the %d-th rank most often for a total of %d times among names registered for baby %s born in the period from %d to %d.The total number of occurrences of %s is %,d, which represents %s of total female births at the %d-th rank in the period from %d to %d.", result[0].getName(), k, result[0].getFrequency(), genderOut, starting_Year, ending_Year,result[0].getName(), result[0].getOccurances(), result[0].getPercentage(), k, starting_Year, ending_Year);
	    
	    	    	textAreaSummary.setText(summ);
	    			
	    		}
	    		if(datatable) {
	    			t2ReportTable.setItems(getNames(result));
	    			t2TotFreq.setText(String.format("%d",ending_Year-starting_Year+1));
	    			t2TotOcc.setText(String.format("%d",T2Names.getbirthCount()));
	    			t2TotPerc.setText(String.format("100.0%%"));
	    		}
	    		if(barchart) {
	    			t2BarChart.setTitle(String.format("%d-th Most Popular Names Between %d to %d", k, starting_Year, ending_Year));
	    			XYChart.Series<String, Integer> set1 = new XYChart.Series<>();
	    			for (T2Names nam : result) {
	    				if(nam!=null) {
	    					set1.getData().add(new XYChart.Data<>(nam.getName(), nam.getOccurances()));
	    				}
	    			}
	    			t2BarChart.getData().addAll(set1);
	    		}
	    		if(piechart) {
	    			ObservableList<PieChart.Data> pieChartData= FXCollections.observableArrayList();
	    			for(T2Names nam : result) {
	    				if(nam!=null) {
	    					pieChartData.add(new PieChart.Data(nam.getName(), (float)(nam.getOccurances()*100.0/T2Names.getbirthCount())));
	    				}
	    			}
	    			t2PieChart.setData(pieChartData);
	    			t2PieChart.setStartAngle(90);
	    			
	    			t2PieChart.getData().forEach(data -> {
	    			    String percentage = String.format("%.1f%%", (data.getPieValue()));
	    			    Tooltip toolTip = new Tooltip(percentage);
	    			    Tooltip.install(data.getNode(), toolTip);
	    			});
	    		}
	    	}
    	} else {
        	t2SummaryTab.setDisable(true);
        	t2DataTableTab.setDisable(true);
        	t2BarChartTab.setDisable(true);
        	t2PieChartTab.setDisable(true);
        	t2ConsoleTab.setStyle("-fx-text-base-color: red;");
        	t2TabPane.getSelectionModel().select(t2ConsoleTab);
        	
    	}
    	textAreaConsole.setText(oReport);
    }
    
    public ObservableList<T2Names> getNames(T2Names [] names) {
		ObservableList<T2Names> Names = FXCollections.observableArrayList();
		
		for(T2Names nam : names) {
			if(nam!=null) {
				Names.add(nam);
			}
		}

		
		return Names;
	}
    
}
