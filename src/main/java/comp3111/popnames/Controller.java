/**
 * Building on the sample skeleton for 'ui.fxml' COntroller Class generated by SceneBuilder 
 */
package comp3111.popnames;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Tab;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Tab;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;


public class Controller {

    @FXML
    private Tab tabTaskZero;

    @FXML
    private TextField textfieldNameF;

    @FXML
    private TextField textfieldYear;

    @FXML
    private Button buttonRankM;

    @FXML
    private TextField textfieldNameM;

    @FXML
    private Button buttonRankF;

    @FXML
    private Button buttonTopM;

    @FXML
    private Button buttonTopF;

    @FXML
    private Button buttonSummary;

    @FXML
    private Tab tabReport1;

    @FXML
    private TextField T1TextFieldYear;

    @FXML
    private TextField T1TextFieldtopN;

    @FXML
    private CheckBox T1_displaySummary;

    @FXML
    private CheckBox T1_displayDataTable;

    @FXML
    private CheckBox T1_displayBarChart;

    @FXML
    private CheckBox T1_displayPieChart;

    @FXML
    private Button T1ButtonComputeResults;

    @FXML
    private Tab tabReport2;

    @FXML
    private CheckBox t2DataTable;

    @FXML
    private CheckBox t2Summary;

    @FXML
    private CheckBox t2BarChart;

    @FXML
    private CheckBox t2PieChart;

    @FXML
    private TextField t2Year1;

    @FXML
    private TextField t2Year2;

    @FXML
    private TextField t1Pop;

    @FXML
    private TextField t1Gender;

    @FXML
    private Button t2GenerateResults;

    @FXML
    private Tab tabReport3;

    @FXML
    private Tab tabApp1;

    @FXML
    private TextField T4textFieldDadsName;

    @FXML
    private TextField T4textFieldDadsYOB;

    @FXML
    private TextField T4textFieldMomsName;

    @FXML
    private TextField T4textFieldMomsYOB;

    @FXML
    private Button t4ButtonT4X1;

    @FXML
    private Button t4ButtonT4X2;

    @FXML
    private Tab tabApp2;

    @FXML
    private TextField t5Name;

    @FXML
    private TextField t5Gender;

    @FXML
    private TextField t5YOB;

    @FXML
    private TextField t5GenderMate;

    @FXML
    private TextField t5Preference;

    @FXML
    private Button t5T5X1;

    @FXML
    private Button t5T5X2;

    @FXML
    private Tab tabApp3;

    @FXML
    private TextArea textAreaConsole;
    
    @FXML
    private Tab t2DataTableTab;
    
    @FXML
    private TableView<T2Names> t2ReportTable;

    @FXML
    private TableColumn<T2Names, String> t2Name;

    @FXML
    private TableColumn<T2Names, Integer> t2Frequency;

    @FXML
    private TableColumn<T2Names, Integer> t2Occurances;

    @FXML
    private TableColumn<T2Names, Integer> t2Percentage;

    /**
     *  Task Zero
     *  To be triggered by the "Summary" button on the Task Zero Tab 
     *  
     */
    @FXML
    void doSummary() {
    	int year = Integer.parseInt(textfieldYear.getText());
    	String oReport = AnalyzeNames.getSummary(year);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero
     *  To be triggered by the "Rank (female)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doRankF() {
    	String oReport = "";
    	String iNameF = textfieldNameF.getText();
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	int oRank = AnalyzeNames.getRank(iYear, iNameF, "F");
    	if (oRank == -1)
    		oReport = String.format("The name %s (female) has not been ranked in the year %d.\n", iNameF, iYear);
    	else
    		oReport = String.format("Rank of %s (female) in year %d is #%d.\n", iNameF, iYear, oRank);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero
     *  To be triggered by the "Rank (male)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doRankM() {
    	String oReport = "";
    	String iNameM = textfieldNameM.getText();
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	int oRank = AnalyzeNames.getRank(iYear, iNameM, "M");
    	if (oRank == -1)
    		oReport = String.format("The name %s (male) has not been ranked in the year %d.\n", iNameM, iYear);
    	else
    		oReport = String.format("Rank of %s (male) in year %d is #%d.\n", iNameM, iYear, oRank);
    	textAreaConsole.setText(oReport);
    }


    /**
     *  Task Zero
     *  To be triggered by the "Top 5 (female)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doTopF() {
    	String oReport = "";
    	final int topN = 5;
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	oReport = String.format("Top %d most popular names (female) in the year %d:\n", topN, iYear);
    	for (int i=1; i<=topN; i++)
    		oReport += String.format("#%d: %s\n", i, AnalyzeNames.getName(iYear, i, "F"));
    	textAreaConsole.setText(oReport);
    }


    /**
     *  Task Zero
     *  To be triggered by the "Top 5 (male)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doTopM() {
    	String oReport = "";
    	final int topN = 5;
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	oReport = String.format("Top %d most popular names (male) in the year %d:\n", topN, iYear);
    	for (int i=1; i<=topN; i++)
    		oReport += String.format("#%d: %s\n", i, AnalyzeNames.getName(iYear, i, "M"));
    	textAreaConsole.setText(oReport);
    }
    @FXML
    void t1ComputeResults() {
    	textAreaConsole.setText("Testing T1");
    }

    @FXML
    void t4_computeT4X1() {
    	textAreaConsole.setText("Testing T4X1");
    }

    @FXML
    void t4_computeT4X2() {
    	textAreaConsole.setText("Testing T4X2");
    }

    @FXML
    void t5_computeT5X1() {
    	textAreaConsole.setText("Testing T5X1");
    }

    @FXML
    void t5_computeT5X2() {
    	textAreaConsole.setText("Testing T5X2");
    }

    @FXML
    void t2GenerateResults() {
//    	textAreaConsole.setText("Testing T2");
    	String oReport = "";
    	boolean err = false;
    	
    	//Validate and Input Starting Year
    	int starting_Year=0;
    	try {
    		if(t2Year1.getText() =="") {
    			throw new Exception("Error: Starting Year of Interest has not been inputted\n");
    		}
    		starting_Year = Integer.parseInt(t2Year1.getText());
    		if(starting_Year < 1880 || starting_Year > 2019) {
    			throw new Exception("Invalid Starting Year of Interest: Year Out of Range\n");
    		}
    	}
    	catch (NumberFormatException e) {
    		oReport += "Please input valid Starting Year of Interst (Integer Value between 1880 and 2019)\n";
    		err=true;
    	}
    	catch (Exception e) {
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	//Validate and Input Ending Year
    	
    	int ending_Year = 0;
    	try {
    		if(t2Year2.getText() =="") {
    			throw new Exception("Error: Ending Year of Interest has not been inputted\n");
    		}
    		ending_Year = Integer.parseInt(t2Year2.getText());
    		if(ending_Year < 1880 || ending_Year > 2019) {
    			throw new Exception("Invalid Ending Year of Interest: Year Out of Range\n");
    		}
    		else if (ending_Year<starting_Year) {
    			throw new Exception("Invalid Ending Year of Interest: Ending Year of Interest is less than Starting Year of Interest\n");
    		}
    	}
    	catch (NumberFormatException e) {
    		oReport += "Please input valid Ending Year of Interst (Integer Value between 1880 and 2019)\n";
    		err=true;
    	}
    	catch (Exception e) {
    		oReport += e.getMessage();
    		err=true;
    	}
    	

    	//Validate and Input K
    	
    	int k = 0;
    	try {
    		if(t1Pop.getText() =="") {
    			throw new Exception("Error: K-th Popular Name to Be Reported has not been inputted\n");
    		}
    		k = Integer.parseInt(t1Pop.getText());
    		if(k < 1 || k > 1000) {
    			throw new Exception("Invalid K-th Popular Name to Be Reported: K-th Value out of range\n");
    		}
    	}
    	catch (Exception e) {
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	//Validate and Input Gender
    	
    	String gender = t1Gender.getText();
    	try {
    		if(gender =="") {
    			throw new Exception("Error: Gender has not been inputted\n");
    		}
    		if(!gender.contentEquals("M") && ! !gender.contentEquals("M")) {
    			throw new Exception("Invalid Gender: Gender can either be 'M' or 'F'\n");
    		}
    	}
    	catch (Exception e) {
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	//Validate and Input Report Selection
    	
    	boolean summary = t2Summary.isSelected();
    	boolean datatable = t2DataTable.isSelected();
    	boolean barchart = t2BarChart.isSelected();
    	boolean piechart = t2PieChart.isSelected();
    
    	if(!(summary | datatable | barchart | piechart)) {
    		oReport += "Error: No Data Reporting Method has been Chosen (Please select required reports using the checkbox)\n";
    		err=true;
    	}
    	T2Names [] result = null;
    	if(!err) {
	    	oReport += String.format("Start Year: %d\n",starting_Year);
	    	oReport += String.format("End Year: %d\n",ending_Year);
	    	oReport += String.format("K: %d\n",k);
	    	oReport += String.format("Gender: %s\n",gender);
	    	oReport += String.format("Summary: %b\n",summary);
	    	oReport += String.format("Datatable: %b\n",datatable);
	    	oReport += String.format("Barchart: %b\n",barchart);
	    	oReport += String.format("Piechart: %b\n",piechart);
	    	result = AnalyzeNames.getKthPopularNames(starting_Year, ending_Year, k, gender);
    	}
    	textAreaConsole.setText(oReport);
    	t2Name.setCellValueFactory(new PropertyValueFactory<T2Names,String>("name"));
    	t2Frequency.setCellValueFactory(new PropertyValueFactory<T2Names,Integer>("frequency"));
    	t2Occurances.setCellValueFactory(new PropertyValueFactory<T2Names,Integer>("occurances"));
    	t2Percentage.setCellValueFactory(new PropertyValueFactory<T2Names,Integer>("percentage"));
    	if(result!=null) {
    		t2ReportTable.setItems(getNames(result));
    	}
    }
    
    public ObservableList<T2Names> getNames(T2Names [] names) {
		ObservableList<T2Names> Names = FXCollections.observableArrayList();
//		for(T2Names nam: names) {
//			Names.add(nam);
//		}
//		Names.add(new T2Names("Bob",50,5));
//		Names.add(new T2Names("Ben",20,8));
		for(T2Names nam : names) {
			Names.add(nam);
		}
		
		return Names;
	}

}
