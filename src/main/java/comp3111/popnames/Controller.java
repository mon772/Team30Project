/**
 * Building on the sample skeleton for 'ui.fxml' COntroller Class generated by SceneBuilder 
 */
package comp3111.popnames;



import java.util.concurrent.TimeUnit;

import com.gargoylesoftware.htmlunit.javascript.host.Console;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.paint.Color;
import javafx.util.Duration;
import javafx.scene.control.ColorPicker;

import javafx.fxml.FXML;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.PieChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.control.Tab;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.ProgressIndicator;
import javafx.scene.control.TabPane;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.shape.Rectangle;
import javafx.scene.control.Tooltip;
import javafx.scene.Scene;
import javafx.scene.image.ImageView;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.IntegerProperty;
import javafx.scene.control.Slider;
import javafx.scene.control.ChoiceBox;


public class Controller {

    @FXML
    private Tab tabTaskZero;

    @FXML
    private TextField textfieldNameF;

    @FXML
    private TextField textfieldYear;

    @FXML
    private Button buttonRankM;

    @FXML
    private TextField textfieldNameM;

    @FXML
    private Button buttonRankF;

    @FXML
    private Button buttonTopM;

    @FXML
    private Button buttonTopF;

    @FXML
    private Button buttonSummary;

    @FXML
    private Tab tabReport1;

    @FXML
    private TextField T1TextFieldYear;

    @FXML
    private TextField T1TextFieldtopN;

    @FXML
    private CheckBox T1_displaySummary;

    @FXML
    private CheckBox T1_displayDataTable;

    @FXML
    private CheckBox T1_displayBarChart;

    @FXML
    private CheckBox T1_displayPieChart;

    @FXML
    private Button T1ButtonComputeResults;

    @FXML
    private Tab t1ConsoleTab;

    @FXML
    private TextArea textAreaConsole1;

    @FXML
    private Tab t1SummaryTab;

    @FXML
    private TextArea t1textAreaSummaryMale;

    @FXML
    private TextArea t1textAreaSummaryFemale;

    @FXML
    private Tab t1DataTableTab;


    @FXML
    private TableView<T1Names> t1ReportTableMale;

    @FXML
    private TableColumn<T1Names, Integer> t1RankMale;

    @FXML
    private TableColumn<T1Names, String> t1NameMale;

    @FXML
    private TableColumn<T1Names, Integer> t1OccurencesMale;

    @FXML
    private TableColumn<T1Names, String> t1PercentageMale;

    @FXML
    private Label t2TotFreq1;

    @FXML
    private Label t2TotOcc1;

    @FXML
    private Label t2TotPerc1;

    @FXML
    private TableView<T1Names> t1ReportTableFemale;

    @FXML
    private TableColumn<T1Names, Integer> t1RankFemale;

    @FXML
    private TableColumn<T1Names, String> t1NameFemale;

    @FXML
    private TableColumn<T1Names, Integer> t1OccurancesFemale;

    @FXML
    private TableColumn<T1Names, String> t1PercentageFemale;

    @FXML
    private Tab t1BarChartTab;

    @FXML
    private BarChart<String, Integer> t1BarChartMale;

    @FXML
    private BarChart<String, Integer> t1BarChartFemale;

    @FXML
    private Tab t1PieChartTab;

    @FXML
    private PieChart t1PieChartMale;

    @FXML
    private PieChart t1PieChartFemale;

    @FXML
    private Tab tabReport2;

    @FXML
    private CheckBox t2Summary;
    
    @FXML
    private Label t2DataDisplayLabel;
    
    @FXML
    private CheckBox t2DataTable;

    @FXML
    private CheckBox t2BarChartCheck;

    @FXML
    private CheckBox t2PieChartCheck;

    @FXML
    private TextField t2Year1;

    @FXML
    private TextField t2Year2;

    @FXML
    private TextField t1Pop;

    @FXML
    private TextField t1Gender;

    @FXML
    private Button t2GenerateResults;

    @FXML
    private Tab t2ConsoleTab;

    @FXML
    private TextArea textAreaConsole;

    @FXML
    private Tab t2SummaryTab;

    @FXML
    private TextArea textAreaSummary;

    @FXML
    private Tab t2DataTableTab;

    @FXML
    private TableView<T2Names> t2ReportTable;

    @FXML
    private TableColumn<T2Names, String> t2Name;

    @FXML
    private TableColumn<T2Names, Integer> t2Frequency;

    @FXML
    private TableColumn<T2Names, Integer> t2Occurances;

    @FXML
    private TableColumn<T2Names, String> t2Percentage;

    @FXML
    private Label t2TotFreq;

    @FXML
    private Label t2TotOcc;

    @FXML
    private Label t2TotPerc;

    @FXML
    private Tab t2BarChartTab;

    @FXML
    private BarChart<String, Integer> t2BarChart;

    @FXML
    private CategoryAxis t2BarChartNames;

    @FXML
    private NumberAxis t2BarChartOccurances;

    @FXML
    private Tab t2PieChartTab;

    @FXML
    private PieChart t2PieChart;
    
    @FXML
    private Tab t2LineChartTab;

    @FXML
    private LineChart<String, Integer> t2LineChart;

    @FXML
    private CheckBox t2LineCheck;

    @FXML
    private Tab tabReport3;

    @FXML
    private Tab tabApp1;

    @FXML
    private TextField T4textFieldDadsName;

    @FXML
    private TextField T4textFieldDadsYOB;

    @FXML
    private TextField T4textFieldMomsName;

    @FXML
    private TextField T4textFieldMomsYOB;

    @FXML
    private Button t4ButtonT4X1;

    @FXML
    private Button t4ButtonT4X2;

    @FXML
    private TabPane t4ResultsTabPane;

    @FXML
    private Tab t4Console;

    @FXML
    private TextArea t4ConsoleTextArea;

    @FXML
    private Tab t4X1GenderSelection;

    @FXML
    private Label t4X1UserGenderPrompt;

    @FXML
    private Button t4X1MaleButton;

    @FXML
    private ImageView t4MaleImage;

    @FXML
    private Button t4X1FemleButton;

    @FXML
    private ImageView t4FemaleImage;

    @FXML
    private Tab t4X1Computation;

    @FXML
    private TextArea t4X1ComputeTextArea;
    
    @FXML
    private Tab t4X2Computation;

    @FXML
    private TextArea t4X2ComputeTextArea;

    @FXML
    private Tab t4X2GenderSelection;

    @FXML
    private Label t4X2UserGenderPrompt;

    @FXML
    private ImageView t4X2MaleImage;

    @FXML
    private ImageView t4X2FemaleImage;

    @FXML
    private Button t4X2MaleButton;

    @FXML
    private Button t4X2FemleButton;
    
    @FXML
    private Tab tabApp2;

    @FXML
    private TextField t5Name;

    @FXML
    private TextField t5Gender;

    @FXML
    private TextField t5YOB;

    @FXML
    private TextField t5GenderMate;

    @FXML
    private TextField t5Preference;

    @FXML
    private Button t5T5X1;

    @FXML
    private Button t5T5X2;

    @FXML
    private TextArea a2TextArea;

    @FXML
    private TabPane a2TabPane;
    
    @FXML
    private TabPane t2TabPane;

    @FXML
    private Tab a2ConsoleTab;

    @FXML
    private TextArea a2TextAreaConsole;

    @FXML
    private Button a2ViewResults;

    @FXML
    private ProgressBar t5ProgressBar;

    @FXML
    private ProgressIndicator t5ProgressIndicator;

    @FXML
    private Tab a2ResultsTab;

    @FXML
    private TextArea textAreaSummary2;

    @FXML
    private Button a2ResultsNext;

    @FXML
    private Tab a2BarChartTab;

    @FXML
    private BarChart<?, ?> a2BarChart;

    @FXML
    private CategoryAxis a2BarChartNames;

    @FXML
    private NumberAxis a2BarChartOccurances;

    @FXML
    private Button a2ResultsNext1;

    @FXML
    private Tab a2PieChart1;

    @FXML
    private PieChart t5X1PieChart;

    @FXML
    private Tab a2ConsoleTab1;

    @FXML
    private TextArea a2TextAreaConsoleX2;

    @FXML
    private Button a2EnterAdditionalData;

    @FXML
    private Tab a2AdditionalData;

    @FXML
    private Button a2ComputeResultsTX2;

    @FXML
    private Label RandomNumberLabel;

    @FXML
    private TextField t5RandInt1;

    @FXML
    private Label FavouriteColourLabel;

    @FXML
    private TextField t5RandInt2;

    @FXML
    private ColorPicker t5FavouriteColour;

    @FXML
    private Label RandomNumberLabel2;

    @FXML
    private Label AdditionalDataTitle;

    @FXML
    private Label PleaseComputeLabel;

    @FXML
    private Label ErrorLabel2;

    @FXML
    private Label ErrorLabel1;

    @FXML
    private Label ErrorLabel3;

    @FXML
    private Tab a2ResultsX2;
    
    @FXML
    private Rectangle ResultsX2Background;

    @FXML
    private Label textAreaResults;
    
    @FXML
    private Label a2ResultName;
    
    @FXML
    private Button a2ResultsNextX2;

    @FXML
    private Tab A2PieTab;

    @FXML
    private PieChart t2PieChartX2;

    @FXML
    private Tab tabApp3;
    
    //=======================     Task 3 variables        ==============================
    @FXML
    private TextField T3StartYearInput;
    @FXML
    private TextField T3EndYearInput;
    @FXML
    private TextField T3NameInput;
    @FXML
    private TextField T3GenderInput;
    @FXML
    private CheckBox T3SummaryCheckBox;
    @FXML
    private CheckBox T3DataTableCheckBox;
    @FXML
    private CheckBox T3BarChartCheckBox;
    @FXML
    private CheckBox T3LineChartCheckBox;
    @FXML
    private Tab T3ConsoleTab;
    @FXML
    private Tab T3SummaryTab;
    @FXML
    private Tab T3DataTable;
    @FXML
    private Tab T3LineChart;
    @FXML
    private Tab T3BarChart;
    @FXML
    private TextArea T3TextAreaConsole;
    @FXML
    private TextArea T3SummaryDisplay;
    @FXML
    private TableView<T3Names> T3DataTableDisplay;
    @FXML
    private TableColumn<T3Names, Integer> T3Year;
    @FXML
    private TableColumn<T3Names, Integer> T3Rank;
    @FXML
    private TableColumn<T3Names, Integer> T3Occurances;
    @FXML
    private TableColumn<T3Names, String> T3Percentage;
    @FXML
    private BarChart<String, Integer> T3BarChartDisplay;
    @FXML
    private LineChart<String, Integer> T3LineChartDisplay;
    @FXML
    private TabPane T3ResultsTabPane;

    //=======================     Task 6 variables        ==============================
    @FXML
    private TextArea T6Description;
    @FXML
    private TextField T6iNameInput;
    @FXML
    private TextField T6iYOBInput;
    @FXML
    private TextField T6iGenderInput;
    @FXML
    private TextField T6iPreferenceInput;
    @FXML
    private TextField T6iNameMateInput;
    @FXML
    private TextField T6iGenderMateInput;
    @FXML
    private TextArea T6TextAreaConsole;
    @FXML 
    private TextField T6VariabilityInput;
    @FXML
    private LineChart<String, Double> T6LineChartDisplay;
  
 
    @FXML
    private Label t4X1MainMessage;

    @FXML
    private Label t4X1TopNames;

    @FXML
    private ImageView t4X1ThinkingImage;

    @FXML
    private Label t4X1AskingText;

    @FXML
    private PieChart t4X1PieChart;

    @FXML
    private Label t4X1TryPieChartMessage;

    @FXML
    private Label t4X1AnswerPrompt;
    
    @FXML
    private Label t4X2ExtraYearsPrompt;

    @FXML
    private Slider t4X2UniquenessScaleAnswer;

    @FXML
    private TextField t4X2ExtraYearsAnswer;

    @FXML
    private Label t4X2UniquenessScale;

    @FXML
    private Label t4X2PriorityPrompt;

    @FXML
    private Button t4X2GetNamePrediction;
    
    ObservableList<String> choicesList = FXCollections.observableArrayList("Yes" , "No");

    @FXML
    private ChoiceBox<String> t4X2PriorityPromptAnswerChoice;
    
    @FXML
    private Tab t4X2NameGeneration;

    @FXML
    private TextArea t4X2NamePredictionTextArea;
    
    @FXML
    private BarChart<String, Integer> t4X2BarChart;
    
    @FXML
    private CategoryAxis t4X2BarChartXAxis;
    
    @FXML
    private Label t4X2NameGenerationExplanation;

    @FXML
    private Label t4X2NameGenerationResultsOccurences;

    @FXML
    private Label t4X2NameGenerationResults;
    
    @FXML
    private CheckBox T1_displayLineChart;
    
    @FXML
    private Tab t1LineChartTab;

    @FXML
    private LineChart<String, Integer> t1LineChartMale;

    @FXML
    private LineChart<String, Integer> t1LineChartFemale;
    
    @FXML
    private CategoryAxis t1BarChartMaleXaxis;

    @FXML
    private CategoryAxis t1BarChartFemaleXaxis;

    @FXML
    private NumberAxis t1BarChartMaleYaxis;

    @FXML
    private NumberAxis t1BarChartFemaleYaxis;
    
    @FXML
    private Label t4X2SliderValue;
    
    @FXML
    private TabPane t1TabPane;
    
    
    
    

    /**
     * Initializes the value for a dropdown menu 
     */
    
    
    @FXML
    private void initialize() {
    	t4X2PriorityPromptAnswerChoice.setValue("Yes");
    	t4X2PriorityPromptAnswerChoice.setItems(choicesList);
    }

    @FXML
    private Label t4X2ExtraYearsError;
    
    private String t4_selected_gender = "";

    /**
     *  Task Zero
     *  To be triggered by the "Summary" button on the Task Zero Tab 
     *  
     */
    @FXML
    void doSummary() {
    	int year = Integer.parseInt(textfieldYear.getText());
    	String oReport = AnalyzeNames.getSummary(year);
    	textAreaConsole.setText(oReport);
    }
    
    
    /**
     *  Task Zero
     *  To be triggered by the "Rank (female)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doRankF() {
    	String oReport = "";
    	String iNameF = textfieldNameF.getText();
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	int oRank = AnalyzeNames.getRank(iYear, iNameF, "F");
    	if (oRank == -1)
    		oReport = String.format("The name %s (female) has not been ranked in the year %d.\n", iNameF, iYear);
    	else
    		oReport = String.format("Rank of %s (female) in year %d is #%d.\n", iNameF, iYear, oRank);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero
     *  To be triggered by the "Rank (male)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doRankM() {
    	String oReport = "";
    	String iNameM = textfieldNameM.getText();
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	int oRank = AnalyzeNames.getRank(iYear, iNameM, "M");
    	if (oRank == -1)
    		oReport = String.format("The name %s (male) has not been ranked in the year %d.\n", iNameM, iYear);
    	else
    		oReport = String.format("Rank of %s (male) in year %d is #%d.\n", iNameM, iYear, oRank);
    	textAreaConsole.setText(oReport);
    }


    /**
     *  Task Zero
     *  To be triggered by the "Top 5 (female)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doTopF() {
    	String oReport = "";
    	final int topN = 5;
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	oReport = String.format("Top %d most popular names (female) in the year %d:\n", topN, iYear);
    	for (int i=1; i<=topN; i++)
    		oReport += String.format("#%d: %s\n", i, AnalyzeNames.getName(iYear, i, "F"));
    	textAreaConsole.setText(oReport);
    }


    /**
     *  Task Zero
     *  To be triggered by the "Top 5 (male)" button on the Task Zero Tab
     *  
     */
    @FXML
    void doTopM() {
    	String oReport = "";
    	final int topN = 5;
    	int iYear = Integer.parseInt(textfieldYear.getText());
    	oReport = String.format("Top %d most popular names (male) in the year %d:\n", topN, iYear);
    	for (int i=1; i<=topN; i++)
    		oReport += String.format("#%d: %s\n", i, AnalyzeNames.getName(iYear, i, "M"));
    	textAreaConsole.setText(oReport);
    }
    /**
     * This function is triggered when the user click the compute results button for the first reporting task 
     */
    @FXML
    void t1ComputeResults() {
    	t1ConsoleTab.setStyle("-fx-text-base-color: black;");
    	t1SummaryTab.setDisable(true);
    	t1DataTableTab.setDisable(true);
    	t1BarChartTab.setDisable(true);
    	t1PieChartTab.setDisable(true);
    	t1LineChartTab.setDisable(true);
    	t1ReportTableMale.getItems().clear();
    	t1ReportTableFemale.getItems().clear();
    	t1textAreaSummaryMale.setText("");
		t1textAreaSummaryFemale.setText("");
		t1BarChartMale.getData().clear();
		t1BarChartFemale.getData().clear();
		t1PieChartMale.getData().clear();
		//t1PieChartMale.setAnimated(false);
		t1PieChartFemale.getData().clear();
		//t1PieChartFemale.setAnimated(false);
		t1LineChartMale.getData().clear();
		t1LineChartFemale.getData().clear();
		t1BarChartMaleXaxis.setAnimated(false);
		t1BarChartFemaleXaxis.setAnimated(false);
		t1BarChartFemaleYaxis.setAnimated(false);
		t1BarChartMaleYaxis.setAnimated(false);
    	String oReport = "";
    	String year = T1TextFieldYear.getText();
    	String input_avaliable_error = "" ;
    	if(year == "") {
    		input_avaliable_error += "The year is blank! Please enter year \n";
    	}
    	String n = T1TextFieldtopN.getText();
    	if(n == "") {
    		input_avaliable_error += "The top N most popular names to reported is blank! Please enter a value \n";
    	}
    	
    	boolean summary_box = T1_displaySummary.isSelected();
    	boolean dt_box = T1_displayDataTable.isSelected();
    	boolean bar_chart_box = T1_displayBarChart.isSelected();
    	boolean pie_chart_box = T1_displayPieChart.isSelected();
    	boolean line_chart_box = T1_displayLineChart.isSelected();
    	boolean boxes_checked = true ;
    	if((summary_box == false)&&(dt_box == false)&&(bar_chart_box == false)&&(pie_chart_box == false)&&(line_chart_box==false)) {
    		input_avaliable_error += ("Please Check or Select at Least One Form of Data Representation and Try Again!");
    		boxes_checked = false ; 
    	}
    	if((year == "")||(n=="")||(boxes_checked==false)) {
    		textAreaConsole1.setText(input_avaliable_error);
    		t1ConsoleTab.setStyle("-fx-text-base-color: red;");
    		t1TabPane.getSelectionModel().select(t1ConsoleTab);
    		return;
    	}
    	String validation_error = "" ; 
    	boolean year_validated = false ;
    	int int_year = 0 ;
    	try {
    		int_year = Integer.parseInt(year);
    		if((int_year >=1880)&&(int_year <= 2019)) {
    			year_validated = true ; 
    		}
    		else {
    			validation_error += "Enter data value in the range for the Year. It too small or too large! \n";
    		}
    		
    	}
    	catch (Exception e) {
    		validation_error += "Enter the Correct Datatype for the Year. Enter a Number! \n";
    	}
    	boolean n_validated = false ;
    	int int_n = 0 ;
    	try {
    		int_n = Integer.parseInt(n);
    		if((int_n >=1)&&(int_n <= 10)) {
    			n_validated = true ; 
    		}
    		else {
    			validation_error += "Enter data value in the range for the N. It too small or too large! \n";
    		}
    		
    	}
    	catch (Exception e) {
    		validation_error += "Enter the Correct Datatype for the N. Enter a Number! \n";
    	}
    	if((!year_validated)||(!n_validated)) {
    		textAreaConsole1.setText(validation_error);
    		t1ConsoleTab.setStyle("-fx-text-base-color: red;");
    		t1TabPane.getSelectionModel().select(t1ConsoleTab);
    		return; 
    	}
    	//oReport = String.format("Year %s\n", year);
    	//oReport += String.format("N %s\n", n);
    	//oReport += String.format("Summary box %b\n", summary_box);
    	//oReport += String.format("Data table %b\n" , dt_box);
    	//oReport += String.format("Bar Chart box %b\n", bar_chart_box);
    	//oReport += String.format("Pie Chart Box %b\n" , pie_chart_box);
    	//oReport += String.format("Lets implement the charts!\n" );
    	//textAreaConsole.setText(oReport);
    	textAreaConsole1.setText("Select the repective Tabs to Check the Results");
    	AnalyzeNames analyze_obj = new AnalyzeNames(); 
    	String []  top_male_names = new String[int_n];
    	String []  top_female_names = new String[int_n];
    	int [] top_male_occurences = new int[int_n];
    	int [] top_female_occurences = new int[int_n];
    	String []  top_male_percentages = new String[int_n];
    	String [] top_female_percentages = new String[int_n];
    	int [] top_male_ranks = new int[int_n];
    	int [] top_female_ranks = new int[int_n];
    	int all_males = 0 ; 
    	int all_females = 0 ;
    	all_males = analyze_obj.getTotalMales(int_year);
    	all_females = analyze_obj.getTotalFemales(int_year);
    	String male_gender = "M";
    	String female_gender = "F";
    	String test_output = "";
    	
    	for (int i=0 ; i<int_n ; i++) {
    		top_male_ranks[i] = i+1;
    		top_female_ranks[i] = i+1 ; 
    		top_male_names[i] = analyze_obj.getName(int_year , i+1 , male_gender);
    		top_female_names[i] = analyze_obj.getName(int_year , i+1 , female_gender);
    		top_male_occurences[i] = analyze_obj.getOccurance(int_year, top_male_names[i], male_gender);
    		System.out.println(top_male_occurences[i]);
    		top_female_occurences[i] = analyze_obj.getOccurance(int_year, top_female_names[i], female_gender);
    		float mp = ((float)top_male_occurences[i]/all_males)*100;
    		float fp = ((float)top_female_occurences[i]/all_females)*100;
    		top_female_percentages[i] = String.format("%.2f%%", fp);
    		top_male_percentages[i] = String.format("%.2f%%", mp);
    	}
    	for(int i= 0 ; i<int_n ; i++) {
    		test_output+= String.format("%d %s %d %s\n",top_male_ranks[i] ,top_male_names[i], top_male_occurences[i] , top_male_percentages[i]);
    	}
    	for(int i= 0 ; i<int_n ; i++) {
    		test_output+= String.format("%d %s %d %s\n",top_female_ranks[i] ,top_female_names[i], top_female_occurences[i] , top_female_percentages[i]);
    	}
    	System.out.println(test_output);
    	t1SummaryTab.setDisable(!summary_box);
    	t1DataTableTab.setDisable(!dt_box);
    	t1BarChartTab.setDisable(!bar_chart_box);
    	t1PieChartTab.setDisable(!pie_chart_box);
    	t1LineChartTab.setDisable(!line_chart_box);
    	T1Names []  male_data = new T1Names[int_n];
		T1Names [] female_data = new T1Names[int_n];
		for(int i=0 ; i <int_n ; i++) {
    		male_data[i] = new T1Names(top_male_ranks[i], top_male_names[i] , top_male_occurences[i] , top_male_percentages[i]);
    		female_data[i] = new T1Names(top_female_ranks[i], top_female_names[i] , top_female_occurences[i] , top_female_percentages[i]);
    	}
		int total_top_males = 0 ; 
    	int total_top_females = 0 ;
    	for(int i = 0 ; i<int_n ; i++) {
    		total_top_males += male_data[i].getOccurences();
    		total_top_females += female_data[i].getOccurences();
    	}
    	if(summary_box) {
			String male_result = String.format("%s is the most popular name with the number of occurrences of %d, which represents %s of total male births in %d.", top_male_names[0], top_male_occurences[0] , top_male_percentages[0], int_year);
			String female_result = String.format("%s is the most popular name with the number of occurrences of %d, which represents %s of total male births in %d.", top_female_names[0], top_female_occurences[0] , top_female_percentages[0], int_year);
			t1textAreaSummaryMale.setText(male_result);
			t1textAreaSummaryFemale.setText(female_result);
		}
    	
    	if(dt_box) {
    		
    		t1RankMale.setCellValueFactory(new PropertyValueFactory<T1Names,Integer>("rank"));
	    	t1NameMale.setCellValueFactory(new PropertyValueFactory<T1Names,String>("name"));
	    	t1OccurencesMale.setCellValueFactory(new PropertyValueFactory<T1Names,Integer>("occurences"));
	    	t1PercentageMale.setCellValueFactory(new PropertyValueFactory<T1Names,String>("percentage"));
	    	t1RankFemale.setCellValueFactory(new PropertyValueFactory<T1Names,Integer>("rank"));
	    	t1NameFemale.setCellValueFactory(new PropertyValueFactory<T1Names,String>("name"));
	    	t1OccurancesFemale.setCellValueFactory(new PropertyValueFactory<T1Names,Integer>("occurences"));
	    	t1PercentageFemale.setCellValueFactory(new PropertyValueFactory<T1Names,String>("percentage"));
	    	t1ReportTableMale.setItems(t1getNameData(male_data));
	    	t1ReportTableFemale.setItems(t1getNameData(female_data));
	    	
    	}
    	if(bar_chart_box) {
    		t1BarChartMale.setTitle(String.format("Top %d Names (male) in %d" ,  int_n , int_year));
    		XYChart.Series<String, Integer> set_male = new XYChart.Series<>();
    		set_male.setName("Male Occurences"); 
    		for (T1Names one_name : male_data) {
				if(one_name!=null) {
					set_male.getData().add(new XYChart.Data<>(one_name.getName(), one_name.getOccurences()));
				}
			}
			t1BarChartFemale.setTitle(String.format("Top %d Names (female) in %d" ,  int_n , int_year));
			XYChart.Series<String, Integer> set_female = new XYChart.Series<>();
			set_female.setName("Female Occurences");
			for (T1Names one_name : female_data) {
				if(one_name!=null) {
					set_female.getData().add(new XYChart.Data<>(one_name.getName(), one_name.getOccurences()));
				}
			}
			t1BarChartMale.getData().addAll(set_male);
			t1BarChartFemale.getData().addAll(set_female);
    	}
    	if(pie_chart_box) {
			ObservableList<PieChart.Data> pieChartDataMale= FXCollections.observableArrayList();
			for(T1Names one_name : male_data) {
				if(one_name!=null) {
					pieChartDataMale.add(new PieChart.Data(one_name.getName(), (float)(one_name.getOccurences()*100.0/total_top_males)));
				}
			}
			t1PieChartMale.setData(pieChartDataMale);
			t1PieChartMale.setStartAngle(90);
			ObservableList<PieChart.Data> pieChartDataFemale= FXCollections.observableArrayList();
			for(T1Names one_name : female_data) {
				if(one_name!=null) {
					pieChartDataFemale.add(new PieChart.Data(one_name.getName(), (float)(one_name.getOccurences()*100.0/total_top_females)));
				}
			}
			t1PieChartFemale.setData(pieChartDataFemale);
			t1PieChartFemale.setStartAngle(90);
		}
    	if(line_chart_box) {
    		t1LineChartMale.setTitle(String.format("Top %d Names (male) in %d" ,  int_n , int_year));
    		XYChart.Series<String, Integer> set_male = new XYChart.Series<>();
    		set_male.setName("Male Occurences"); 
    		for (T1Names one_name : male_data) {
				if(one_name!=null) {
					set_male.getData().add(new XYChart.Data<>(one_name.getName(), one_name.getOccurences()));
				}
			}
			t1LineChartFemale.setTitle(String.format("Top %d Names (female) in %d" ,  int_n , int_year));
			XYChart.Series<String, Integer> set_female = new XYChart.Series<>();
			set_female.setName("Female Occurences");
			for (T1Names one_name : female_data) {
				if(one_name!=null) {
					set_female.getData().add(new XYChart.Data<>(one_name.getName(), one_name.getOccurences()));
				}
			}
			t1LineChartMale.getData().addAll(set_male);
			t1LineChartFemale.getData().addAll(set_female);
			
		}
    	
    }
    /**
     * Get the name data for the first reporting task
     * @return a names ObervableList to for the charting
     */
    
    public ObservableList<T1Names> t1getNameData(T1Names [] names) {
		ObservableList<T1Names> Names = FXCollections.observableArrayList();
		
		for(T1Names one_name : names) {
			if(one_name!=null) {
				Names.add(one_name);
			}
		}
		return Names;
	}
    
    /**
     * Checks the validity of the input for the 4th task
     * @return true if the the inputs are valid and return false of it is not valid
     */
    boolean t4_inputs_valid(){
    	String oReport = "";
    	String dad_yob = T4textFieldDadsYOB.getText();
    	String mom_yob = T4textFieldMomsYOB.getText();
    	String dad_name = T4textFieldDadsName.getText();
    	String mom_name = T4textFieldMomsName.getText();
    	String input_avaliable_error = "" ;
    	if(dad_yob == "") {
    		input_avaliable_error += "Dad's Year of Birth has not been entered! Please enter Dad's YOB for Prediction\n";
    		T4textFieldDadsYOB.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    	}
    	if(mom_yob == "") {
    		input_avaliable_error += "Moms' Year of Birth has not been entered! Please enter Mom's YOB for Prediction\n";
    		T4textFieldMomsYOB.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    	}
    	if(dad_name == "") {
    		input_avaliable_error += "Dad's name has not been entered! Please enter Dad's name for Prediction\n";
    		T4textFieldDadsName.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    	}
    	if(mom_name == "") {
    		input_avaliable_error += "Mom's name has not been entered! Please enter Mom's name for Prediction\n";
    		T4textFieldMomsName.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    	}
    	if(input_avaliable_error != "") {
    		t4ConsoleTextArea.setText(input_avaliable_error);
    		t4Console.setStyle("-fx-text-base-color: red;");
    		t4ResultsTabPane.getSelectionModel().select(t4Console);
    		return false;
    	}
    	String validation_error = "" ; 
    	boolean dad_yob_validated = false ;
    	int int_dad_yob = 0 ;
    	try {
    		int_dad_yob = Integer.parseInt(dad_yob);
    		if((int_dad_yob >=1880)&&(int_dad_yob <= 2019)) {
    			dad_yob_validated = true ; 
    		}
    		else {
    			validation_error += "Enter Dad YOB in the range for the Year. It too small or too large! \n";
    			T4textFieldDadsYOB.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		}
    		
    	}
    	catch (Exception e) {
    		validation_error += "Enter the Correct Datatype for the Dad Year of Birth. Enter a Number! \n";
    		T4textFieldDadsYOB.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    	}
    	
    	int int_mom_yob = 0 ;
    	boolean mom_yob_validated = false ;
    	try {
    		int_mom_yob = Integer.parseInt(mom_yob);
    		if((int_mom_yob >=1880)&&(int_mom_yob <= 2019)) {
    			mom_yob_validated = true ; 
    		}
    		else {
    			validation_error += "Enter Mom YOB in the range for the Year. It too small or too large! \n";
    			T4textFieldMomsYOB.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		}
    		
    	}
    	catch (Exception e) {
    		validation_error += "Enter the Correct Datatype for the Mom Year of Birth. Enter a Number! \n";
    		T4textFieldMomsYOB.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    	}
    	boolean dad_name_validated = false ;
    	int dad_flag = 0 ; 
    	for(int i=0 ; i<dad_name.length() ; i++) {
    		if(Character.isLetter(dad_name.charAt(i)) == false) {
    			dad_flag = 1 ; 
    		}
    	}
    	if(dad_flag != 1) {
    		dad_name_validated = true ;
    	}
    	else {
    		validation_error += "Dad name should consist of only letters. Please Enter a valid name!\n";
    		T4textFieldDadsName.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");    		
    	}
    	boolean mom_name_validated = false ;
    	int mom_flag = 0 ; 
    	for(int i=0 ; i<mom_name.length() ; i++) {
    		if(Character.isLetter(mom_name.charAt(i)) == false) {
    			mom_flag = 1 ; 
    		}
    	}
    	if(mom_flag != 1) {
    		mom_name_validated = true ;
    	}
    	else {
    		validation_error += "Mom name should consist of only letters. Please Enter a valid name!\n";
    		T4textFieldMomsName.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    	}
    	if((!mom_name_validated)||(!dad_name_validated)||(!mom_yob_validated)||(!dad_yob_validated)) {
    		t4ConsoleTextArea.setText(validation_error);
    		t4Console.setStyle("-fx-text-base-color: red;");
    		t4ResultsTabPane.getSelectionModel().select(t4Console);
    		return false; 
    	}
    	return true ;
    }
    /**
     * Initializes the scene for the 4th task 
     */
    void t4_initialize_scene() {
    	t4ConsoleTextArea.clear();
    	t4Console.setStyle("-fx-text-base-color: black;");
    	T4textFieldDadsYOB.setStyle("-fx-text-box-border: black ");
    	T4textFieldMomsYOB.setStyle("-fx-text-box-border: black ");
    	T4textFieldDadsName.setStyle("-fx-text-box-border: black ");
    	T4textFieldMomsName.setStyle("-fx-text-box-border: black ");
    	t4X1MainMessage.setVisible(false);
    	t4X1TopNames.setVisible(false);
    	t4X1ThinkingImage.setVisible(false);
    	t4X1AskingText.setVisible(false);
    	t4X1TryPieChartMessage.setVisible(false);
    	t4X1AnswerPrompt.setVisible(false);
    	t4X1PieChart.setVisible(false);
    	t4X1PieChart.getData().clear();
    	t4X2BarChart.getData().clear();
    	t4X2ExtraYearsError.setVisible(false);
    	t4X2BarChartXAxis.setAnimated(false);
    	t4X2UniquenessScaleAnswer.valueProperty().addListener((observableValue , oldValue , newValue) -> {
        	t4X2SliderValue.setText(String.format("Scale Selected Is %.2f", newValue));
        });
    }
    /**
     * transfers control to the gender selection page for T4X1
     */
    @FXML
    void t4_computeT4X1() {
    	t4_initialize_scene();
    	if(t4_inputs_valid() == false) {
    		return;
    	}
    	t4ResultsTabPane.getSelectionModel().select(t4X1GenderSelection);
    }
    /**
     *  transfers control to the gender selection page for T4X2
     */

    @FXML
    void t4_computeT4X2() {
    	t4_initialize_scene();
    	if(t4_inputs_valid() == false) {
    		return;
    	}
    	t4ResultsTabPane.getSelectionModel().select(t4X2GenderSelection);
    }
    
    /**
     *  Makes the female name prediction for the t4X1 algorithm
     */
    @FXML
    void t4X1FemalePrediction(ActionEvent event) {
    	AnalyzeNames obj = new AnalyzeNames();
    	t4ResultsTabPane.getSelectionModel().select(t4X1Computation);
    	int int_dad_yob = Integer.parseInt(T4textFieldDadsYOB.getText());
    	int int_mom_yob = Integer.parseInt(T4textFieldMomsYOB.getText());
    	String dad_name = T4textFieldDadsName.getText();
    	String mom_name = T4textFieldMomsName.getText();
    	String oreport = "";
    	oreport += String.format("Since the little girl and Mother %s will have such a close relationship. It will be wise to look at the top names in %s's YOB %d\n", mom_name , mom_name , int_mom_yob );
    	oreport += String.format("Therefore we will look at the top names so that mother and daughter have something in common :)\n");
    	//t4X1ComputeTextArea.setText(oreport);
    	String []  girl_names = new String[3];
    	String top_names = "";
    	for(int i=0 ; i<3 ; i++) {
    		String name = obj.getName(int_mom_yob , i+1 , "F");
    		top_names += name + "\n";
    		girl_names[i] = name ; 
    	}
    	t4X1MainMessage.setText(oreport);
    	t4X1TopNames.setText(top_names);
    	T1Names []  female_data = new T1Names[3];
    	int [] top_female_occurences = new int[3];
    	String [] top_female_percentages = new String[3];
    	int [] top_female_ranks = new int[3];
    	int all_females = obj.getTotalFemales(int_mom_yob);
    	for (int i=0 ; i<3 ; i++) {
    		top_female_ranks[i] = i+1;
    		top_female_occurences[i] = obj.getOccurance(int_mom_yob, girl_names[i], "F");
    		float mp = ((float)top_female_occurences[i]/all_females)*100;
    		top_female_percentages[i] = String.format("%.2f%%", mp);
    	}
    	for(int i=0 ; i <3 ; i++) {
    		female_data[i] = new T1Names(top_female_ranks[i], girl_names[i] , top_female_occurences[i] , top_female_percentages[i]);
    	}
    	int total_top_females = 0 ;
    	for(int i = 0 ; i<3 ; i++) {
    		total_top_females += female_data[i].getOccurences();
    	}
    	String answer = String.format("Answer: %s! since it is the most popular name in Mom %s's YOB %d with %.2f of the top occurences of the top 3 names in the year %d" , girl_names[0] , mom_name , int_mom_yob , (float)(female_data[0].getOccurences()*100.0/total_top_females) , int_mom_yob );
    	t4X1AnswerPrompt.setText(answer);
    	ObservableList<PieChart.Data> pieChartDataFemale= FXCollections.observableArrayList();
		for(T1Names one_name : female_data) {
			if(one_name!=null) {
				pieChartDataFemale.add(new PieChart.Data(one_name.getName(), (float)(one_name.getOccurences()*100.0/total_top_females)));
			}
		}
		t4X1PieChart.setData(pieChartDataFemale);
    	new Thread(()->{ //use another thread so long process does not block gui
            String result = "";
	    	for(int i=0;i<=4;i++)   {
	            if(i == 0 ){
	            	t4X1MainMessage.setVisible(true);
	            	try {Thread.sleep(4500);} catch (InterruptedException ex) { ex.printStackTrace();}
	            	continue;
	            } 
	            if(i==1) {
	            	t4X1TopNames.setVisible(true);
	            }
	            if(i==2) {
	            	t4X1ThinkingImage.setVisible(true);
	            	t4X1AskingText.setVisible(true);
	            }
	            if(i==3) {
	            	t4X1TryPieChartMessage.setVisible(true);
	            	t4X1PieChart.setVisible(true);
	            }
	            if(i==4) {
	            	t4X1AnswerPrompt.setVisible(true);
	            }
	            try {Thread.sleep(2000);} catch (InterruptedException ex) { ex.printStackTrace();}
	        }

	    }).start();
    	
    }
    /**
     *  Makes the male name prediction for the t4X1 algorithm
     */
    
    @FXML
    void t4X1MalePrediction(ActionEvent event) {
    	AnalyzeNames obj = new AnalyzeNames();
    	t4ResultsTabPane.getSelectionModel().select(t4X1Computation);
    	int int_dad_yob = Integer.parseInt(T4textFieldDadsYOB.getText());
    	int int_mom_yob = Integer.parseInt(T4textFieldMomsYOB.getText());
    	String dad_name = T4textFieldDadsName.getText();
    	String mom_name = T4textFieldMomsName.getText();
    	String oreport = "";
    	oreport += String.format("Since the little boy and Father %s will have such a close relationship. It will be wise to look at the top names in %s's YOB %d\n", dad_name , dad_name , int_dad_yob );
    	oreport += String.format("Therefore we will look at the top names so that father and son have something in common :)\n");
    	//t4X1ComputeTextArea.setText(oreport);
    	String top_names = "Lets go! The 3 top names are....." + "\n";
    	String []  boy_names = new String[3];
    	//String top_names = "";
    	for(int i=0 ; i<3 ; i++) {
    		String name = obj.getName(int_dad_yob , i+1 , "M");
    		top_names += name + "\n";
    		boy_names[i] = name ; 
    	}
    	t4X1MainMessage.setText(oreport);
    	t4X1TopNames.setText(top_names);
    	
    	
    	T1Names []  male_data = new T1Names[3];
    	int [] top_male_occurences = new int[3];
    	String [] top_male_percentages = new String[3];
    	int [] top_male_ranks = new int[3];
    	int all_males = obj.getTotalMales(int_dad_yob);
    	for (int i=0 ; i<3 ; i++) {
    		top_male_ranks[i] = i+1;
    		top_male_occurences[i] = obj.getOccurance(int_dad_yob, boy_names[i], "M");
    		float mp = ((float)top_male_occurences[i]/all_males)*100;
    		top_male_percentages[i] = String.format("%.2f%%", mp);
    	}
    	for(int i=0 ; i <3 ; i++) {
    		male_data[i] = new T1Names(top_male_ranks[i], boy_names[i] , top_male_occurences[i] , top_male_percentages[i]);
    	}
    	int total_top_males = 0 ;
    	for(int i = 0 ; i<3 ; i++) {
    		total_top_males += male_data[i].getOccurences();
    	}
    	String answer = String.format("Answer: %s! since it is the most popular name in Dad %s's YOB %d with %.2f%% of the top occurences of the top 3 names in the year %d" , boy_names[0] , dad_name , int_dad_yob , (float)(male_data[0].getOccurences()*100.0/total_top_males) , int_dad_yob );
    	t4X1AnswerPrompt.setText(answer);
    	ObservableList<PieChart.Data> pieChartDataMale= FXCollections.observableArrayList();
		for(T1Names one_name : male_data) {
			if(one_name!=null) {
				pieChartDataMale.add(new PieChart.Data(one_name.getName(), (float)(one_name.getOccurences()*100.0/total_top_males)));
			}
		}
		t4X1PieChart.setData(pieChartDataMale);
    	new Thread(()->{ //use another thread so long process does not block gui
            String result = "";
	    	for(int i=0;i<=5;i++)   {
	            if(i == 0 ){
	            	t4X1MainMessage.setVisible(true);
	            	try {Thread.sleep(4500);} catch (InterruptedException ex) { ex.printStackTrace();}
	            	continue;
	            } 
	            if(i==1) {
	            	t4X1TopNames.setVisible(true);
	            }
	            if(i==2) {
	            	t4X1ThinkingImage.setVisible(true);
	            	t4X1AskingText.setVisible(true);
	            }
	            if(i==3) {
	            	t4X1TryPieChartMessage.setVisible(true);
	            }
	            if(i==4) {
	            	t4X1PieChart.setVisible(true);
	            }
	            if(i==5) {
	            	t4X1AnswerPrompt.setVisible(true);
	            }
	            try {Thread.sleep(2000);} catch (InterruptedException ex) { ex.printStackTrace();}
	        }

	    }).start();

    }
    /**
     *  Transfers control for the female name prediction for the t4X2 algorithm
     */
    @FXML
    void t4X2FemalePrediction(ActionEvent event) {
    	t4_selected_gender = "F";
    	t4X2ExtraYearsPrompt.setText("Enter the extra years to be checked before and after Moms YOB");
    	t4X2PriorityPrompt.setText("Do you want to give priority to names with the same first letter of Mom's Name?");
    	t4ResultsTabPane.getSelectionModel().select(t4X2Computation);
    	
    }
    /**
     *  Transfers control for the male name prediction for the t4X2 algorithm
     */
    @FXML
    void t4X2MalePrediction(ActionEvent event) {
    	t4_selected_gender = "M";
    	t4X2ExtraYearsPrompt.setText("Enter the extra years to be checked before and after Dads YOB");
    	t4X2PriorityPrompt.setText("Do you want to give priority to names with the same first letter of Dad's Name?");
    	t4ResultsTabPane.getSelectionModel().select(t4X2Computation);
    }
    /**
     *  Generates the name prediction for the t4X2 algorithm
     */
    @FXML
    void t4X2GenerateNames(ActionEvent event) {
    	int int_dad_yob = Integer.parseInt(T4textFieldDadsYOB.getText());
    	int int_mom_yob = Integer.parseInt(T4textFieldMomsYOB.getText());
    	String dad_name = T4textFieldDadsName.getText();
    	String mom_name = T4textFieldMomsName.getText();
    	String extra_years = t4X2ExtraYearsAnswer.getText();
    	boolean year_validated = false ;
    	String validation_error = "";
    	int int_year = 0 ;
    	try {
    		int_year = Integer.parseInt(extra_years);
    		if((int_year >=5)&&(int_year <= 25)) {
    			year_validated = true ; 
    		}
    		else {
    			validation_error += "Enter data value in the range between 5 and 25 for accurate prediction \n";
    		}
    		
    	}
    	catch (Exception e) {
    		validation_error += "Enter the Correct Datatype for extra years. Enter a Number! \n";
    	}
    	if(year_validated == false) {
        	t4X2ExtraYearsError.setVisible(true);
    		t4X2ExtraYearsError.setText(validation_error);
    		return ; 
    	}
    	//String oreport = t4X2ExtraYearsAnswer.getText() + '\n';
    	//double x = t4X2UniquenessScaleAnswer.getValue();
    	//oreport += String.format("Answer %.2f", x);
    	//oreport += t4X2PriorityPromptAnswerChoice.getSelectionModel().getSelectedItem();
    	t4ResultsTabPane.getSelectionModel().select(t4X2NameGeneration);
    	int scaled_value = 0;
    	int upper_limit = 0;
    	int lower_limit = 0;
    	String compare_name_with = "";
    	if(t4_selected_gender.contentEquals("F")) {
    		scaled_value = (dad_name.length()+mom_name.length()) * (int)t4X2UniquenessScaleAnswer.getValue();
    		upper_limit = int_mom_yob + int_year;
    		lower_limit = int_mom_yob - int_year;
    		compare_name_with = mom_name;
    	}
    	else {
    		scaled_value = (dad_name.length()+mom_name.length()) * (int)t4X2UniquenessScaleAnswer.getValue();
    		upper_limit = int_dad_yob + int_year;
    		lower_limit = int_dad_yob - int_year;
    		compare_name_with = dad_name ; 
    		
    	}
    	
    	if(lower_limit<=1880) {
    		lower_limit = 1880;
    	}
    	if(upper_limit >=2019) {
    		upper_limit = 2019;
    	}
    	String []  names = new String [upper_limit - lower_limit+1];
    	int [] occurences = new int[upper_limit - lower_limit+1];
    	AnalyzeNames obj = new AnalyzeNames();
    	if(t4_selected_gender.contentEquals("F")) {
    		for (int i=lower_limit ,  j=0 ; i<=upper_limit ; i++  ,j++) {
        		names[j] = obj.getName(i , scaled_value , "F") ;
        		occurences[j] = obj.getOccurance( i , names[j] , "F");
        		names[j] = obj.getName(i , scaled_value , "F") + " " +String.valueOf(i);
        	}
    	}
    	else {
    		for (int i=lower_limit , j=0 ; i<=upper_limit ; i++  , j++) {
    			names[j] = obj.getName(i , scaled_value , "M") ;
        		occurences[j] = obj.getOccurance( i , names[j] , "M");
        		names[j] = obj.getName(i , scaled_value , "M") + " " +String.valueOf(i);
        	}
    	}
    	T1Names [] data = new T1Names[upper_limit - lower_limit+1];
    	//System.out.println(upper_limit - lower_limit +1);
    	for(int i=0 ; i <=upper_limit -lower_limit; i++) {
    		data[i] = new T1Names(i, names[i] , occurences[i] , "");
    		//System.out.println(names[i]);
    		//System.out.println(occurences[i]);
    	}
    	String oreport = "";
    	boolean priority = false ;
    	oreport += String.format("Depending on the extra years chosen we will look at Year %d to Year %d\n", lower_limit , upper_limit);
    	oreport += String.format("Multiplying the scale of uniqueness with the total characters in the mom and dad's name to find the rank we need %.2f * (%d + %d) = %d [scaled accordingly]\n" ,t4X2UniquenessScaleAnswer.getValue() , mom_name.length(), dad_name.length() ,scaled_value);
    	if(t4X2PriorityPromptAnswerChoice.getSelectionModel().getSelectedItem().equals("Yes")) {
    		priority = true;
    		oreport += String.format("You have opted in for the priority :) You will get the name of the highest occurences with same first letter as parents name (if present) from the data generated below");
    	}
    	else {
    		priority = false ;
    		oreport += String.format("You have opted out for the priority :( You will get the name of the highest occurences from the data generated below");
    	}
    	t4X2NameGenerationExplanation.setText(oreport);
    	if(t4_selected_gender.contentEquals("F")) {
    		t4X2BarChart.setTitle(String.format("%d ranked Names (female) from year %d to %d" ,  scaled_value , upper_limit , lower_limit));
    		XYChart.Series<String, Integer> set_female = new XYChart.Series<>();
    		set_female.setName("Female Occurences"); 
    		for (T1Names one_name : data) {
				if(one_name!=null) {
					set_female.getData().add(new XYChart.Data<>(one_name.getName(), one_name.getOccurences()));
				}
			}
    		t4X2BarChart.getData().addAll(set_female);
    		
    	}
    	else {
    		t4X2BarChart.setTitle(String.format("%d ranked Names (male) from year %d to %d" ,  scaled_value , upper_limit , lower_limit));
    		XYChart.Series<String, Integer> set_male = new XYChart.Series<>();
    		set_male.setName("Male Occurences"); 
    		for (T1Names one_name : data) {
				if(one_name!=null) {
					set_male.getData().add(new XYChart.Data<>(one_name.getName(), one_name.getOccurences()));
				}
			}
    		t4X2BarChart.getData().addAll(set_male);
    	}
    	//System.out.println("Hello World!");
    	String result_name = ""; 
    	int result_occurences = 0;
    	int max_position = 0;
    	int flag = 0 ; 
    	for(int i = 0 ; i<=upper_limit-lower_limit ; i++) {
    		if(Character.toLowerCase(compare_name_with.charAt(0)) == Character.toLowerCase(names[i].charAt(0)) && priority) {
    			if(occurences[i] == result_occurences) {
        			if(names[i].compareTo(result_name)<0) {
        				max_position =  i ;
        				result_name = names[i];
        				result_occurences = occurences[i];
        				flag = 1 ;
        				continue;
        			}
        		}
        		if(occurences[i]>result_occurences) {
        			max_position = i ;
        			result_name = names[i];
        			result_occurences = occurences[i];
        			flag = 1;
        			continue;
        		}
        	if(flag!=1) {
        		max_position =  i ;
				result_name = names[i];
				result_occurences = occurences[i];
				flag = 1 ; 
        		continue;
        	}
    		}
    		if(flag!=1) {
    		if(occurences[i] == result_occurences) {
    			if(names[i].compareTo(result_name)<0) {
    				max_position =  i ;
    				result_name = names[i];
    				result_occurences = occurences[i];
    			}
    		}
    		if(occurences[i]>result_occurences) {
    			max_position = i ;
    			result_name = names[i];
    			result_occurences = occurences[i];
    		}
    	}
    	}
    	String[] ary = result_name.split(" ");
    	t4X2NameGenerationResults.setText(ary[0]);

        t4X2NameGenerationResultsOccurences.setText(Integer.toString(result_occurences));
    }
    /**
     *  Generates name prediction for the T5X1 algorithm
     */

    @FXML
    void t5_computeT5X1() {
//    	a2ResultsTab.setText("ENTER RESULTS TAB\n");
//    	a2ResultsTab.setDisable(false);
    	String iName = t5Name.getText();
    	String iGender = t5Gender.getText();
    	int iYOB = Integer.parseInt(t5YOB.getText());
    	String iGenderMate = t5GenderMate.getText();
    	String iPreference = t5Preference.getText();
    	
    	String oReport = "";
//    	oReport += AnalyzeNames.getCompatiblePairT5X1(iGenderMate, iYOB);
    	oReport+=String.format("Your compatible pair is most likely called %s.\n", AnalyzeNames.getName(iYOB, 1, iGenderMate));
    	oReport+=String.format("To view the Top 5 compatible pairs suitable for you and their probabilities, please press the next button...");
    	a2ResultsNext.setVisible(true);
    	textAreaSummary2.setText(oReport);
    }
    /**
     *  Does user validation for the T5X1 algorithm
     */
    
    @FXML
    void t5_initT5X1() {
    	t5ProgressBar.setVisible(false);
    	t5ProgressIndicator.setVisible(false);
    	a2TextAreaConsole.clear();
    	a2ViewResults.setVisible(false);
    	a2TabPane.getSelectionModel().select(a2ConsoleTab);
    	t5X1PieChart.getData().clear();
    	t5X1PieChart.setAnimated(false);

		t5Name.setStyle("-fx-border-width: 0px ;");
		t5Gender.setStyle("-fx-border-width: 0px ;");
		t5YOB.setStyle("-fx-border-width: 0px ;");
		t5GenderMate.setStyle("-fx-border-width: 0px ;");
		t5Preference.setStyle("-fx-border-width: 0px ;");
		
    	String oReport ="";
    	boolean err = false;
    	
    	String iName = "";
    	try {
    		if(t5Name.getText().equals("")) {
    			throw new Exception("Error: iName has not been inputted\n");
    		}
    	}
    	catch (Exception e) {
    		t5Name.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	boolean isUserMale = false;
    	String iGender = t5Gender.getText();
    	try {
    		if(iGender.equals("")) {
    			throw new Exception("Error: iGender has not been inputted\n");
    		}
    		if(iGender.contentEquals("M")) {
    			isUserMale = true;
    		}
    		else if (iGender.contentEquals("F")) {
    			isUserMale = false;
    		}
    		else {
    			throw new Exception("Invalid Gender: iGender can either be 'M' or 'F'\n");
    		}
    	}
    	catch (Exception e) {
    		t5Gender.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	int iYOB=0;
    	try {
    		if(t5YOB.getText().equals("")) {
    			throw new Exception("Error: iYOB has not been inputted\n");
    		}
    		iYOB = Integer.parseInt(t5YOB.getText());
    		if(iYOB < 1880 || iYOB > 2019) {
    			throw new Exception("Invalid iYOB: Year Out of Range\n");
    		}
    	}
    	catch (NumberFormatException e) {
    		t5YOB.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += "Please input valid iYOB (Integer Value between 1880 and 2019)\n";
    		err=true;
    	}
    	catch (Exception e) {
    		t5YOB.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	boolean isMateMale = false;
    	String iGenderMate = t5GenderMate.getText();
    	try {
    		if(iGenderMate.equals("")) {
    			throw new Exception("Error: iGenderMate has not been inputted\n");
    		}
    		if(iGenderMate.contentEquals("M")) {
    			isMateMale = true;
    		}
    		else if (iGenderMate.contentEquals("F")) {
    			isMateMale = false;
    		}
    		else {
    			throw new Exception("Invalid iGenderMate: iGenderMate can either be 'M' or 'F'\n");
    		}
    	}
    	catch (Exception e) {
    		t5GenderMate.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	boolean isPreferenceYounger = false;
    	String iPreference = t5Preference.getText();
    	try {
    		if(iPreference.equals("")) {
    			throw new Exception("Error: iPreference has not been inputted\n");
    		}
    		if(iPreference.contentEquals("Younger")) {
    			isPreferenceYounger = true;
    		}
    		else if (iPreference.contentEquals("Older")) {
    			isPreferenceYounger = false;
    		}
    		else {
    			throw new Exception("Invalid iPreference: iPreference can either be \"Younger\" or \"Older\" \n");
    		}
    	}
    	catch (Exception e) {
    		t5Preference.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	a2TextAreaConsole.setText(oReport);
    	if(!err) {

    	    new Thread(()->{ //use another thread so long process does not block gui
	            String text = "";
    	    	for(double i=0;i<=100;i++)   {
    	            if(i == 0 ){
//    	        		text="";
    	        		text+="Welcome to Prediction on Names for Compatible Pairs Application!\n\n";
    	        		text+="Our patented prediction algorithms will be used to formulate suitable predictions\n";
    	        		text+="Processing results now...\n";
    	        		t5ProgressBar.setProgress(0.0);
        	            t5ProgressIndicator.setProgress(0.0);
        	            t5ProgressBar.setVisible(true);
        	            t5ProgressIndicator.setVisible(true);
    	        		a2TextAreaConsole.setText(text);
    	            } else {
    	        		t5ProgressBar.setProgress(i/100.0);
        	            t5ProgressIndicator.setProgress(i/100.0);
    	            }

    	            //update gui using fx thread
//    	            final String text2 = text;
    	            
//    	            Platform.runLater(() -> );
    	            try {Thread.sleep(100);} catch (InterruptedException ex) { ex.printStackTrace();}
    	        }
        	    a2ViewResults.setVisible(true);

    	    }).start();
    		
    	}
    	
    }
    /**
     *  Transfers control to the pie chart tab
     */
    @FXML
    void a2ResultsNext() {
    	t5X1PieChart.getData().clear();
    	a2TabPane.getSelectionModel().select(a2PieChart1);
    }
    /**
     *  Transfers control to the view results tab
     */
    @FXML
    void a2ViewResults() {
    	textAreaSummary.clear();
    	a2TabPane.getSelectionModel().select(a2ResultsTab);
    }
    /**
     *  Generates name prediction for the T5X2 algorithm 
     */

    @FXML
    void t5_computeT5X2() {
    	a2TabPane.getSelectionModel().select(a2ConsoleTab1);
    	a2EnterAdditionalData.setVisible(false);
    	String oReport ="";
    	boolean err = false;

		t5Name.setStyle("-fx-border-width: 0px ;");
		t5Gender.setStyle("-fx-border-width: 0px ;");
		t5YOB.setStyle("-fx-border-width: 0px ;");
		t5GenderMate.setStyle("-fx-border-width: 0px ;");
		t5Preference.setStyle("-fx-border-width: 0px ;");
		
  
    	String iName = "";
    	try {
    		if(t5Name.getText().equals("")) {
    			throw new Exception("Error: iName has not been inputted\n");
    		}
    	}
    	catch (Exception e) {
    		t5Name.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	boolean isUserMale = false;
    	String iGender = t5Gender.getText();
    	try {
    		if(iGender.equals("")) {
    			throw new Exception("Error: iGender has not been inputted\n");
    		}
    		if(iGender.contentEquals("M")) {
    			isUserMale = true;
    		}
    		else if (iGender.contentEquals("F")) {
    			isUserMale = false;
    		}
    		else {
    			throw new Exception("Invalid Gender: iGender can either be 'M' or 'F'\n");
    		}
    	}
    	catch (Exception e) {
    		t5Gender.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	int iYOB=0;
    	try {
    		if(t5YOB.getText().equals("")) {
    			throw new Exception("Error: iYOB has not been inputted\n");
    		}
    		iYOB = Integer.parseInt(t5YOB.getText());
    		if(iYOB < 1880 || iYOB > 2019) {
    			throw new Exception("Invalid iYOB: Year Out of Range\n");
    		}
    	}
    	catch (NumberFormatException e) {
    		t5YOB.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += "Please input valid iYOB (Integer Value between 1880 and 2019)\n";
    		err=true;
    	}
    	catch (Exception e) {
    		t5YOB.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	boolean isMateMale = false;
    	String iGenderMate = t5GenderMate.getText();
    	try {
    		if(iGenderMate.equals("")) {
    			throw new Exception("Error: iGenderMate has not been inputted\n");
    		}
    		if(iGenderMate.contentEquals("M")) {
    			isMateMale = true;
    		}
    		else if (iGenderMate.contentEquals("F")) {
    			isMateMale = false;
    		}
    		else {
    			throw new Exception("Invalid iGenderMate: iGenderMate can either be 'M' or 'F'\n");
    		}
    	}
    	catch (Exception e) {
    		t5GenderMate.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	boolean isPreferenceYounger = false;
    	String iPreference = t5Preference.getText();
    	try {
    		if(iPreference.equals("")) {
    			throw new Exception("Error: iPreference has not been inputted\n");
    		}
    		if(iPreference.contentEquals("Younger")) {
    			isPreferenceYounger = true;
    		}
    		else if (iPreference.contentEquals("Older")) {
    			isPreferenceYounger = false;
    		}
    		else {
    			throw new Exception("Invalid iPreference: iPreference can either be \"Younger\" or \"Older\" \n");
    		}
    	}
    	catch (Exception e) {
    		t5Preference.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	if(!err) {
    		oReport+="Welcome to Prediction on Names for Compatible Pairs Application!\n\n";
    		oReport+="Research lead by Dhiren Gupta and his team at MIT has shown that Biological Data and Preferences are not\n sufficient to generate suitable compatibility predictions.\n\n";
    		oReport+="Therefore his team has generated a patented formula that incorporates a persons tastes.\nIn order to recieve a compatibility report using their patented formula, you will need to enter additional data.\n";
    		oReport+="Please press the Enter Additional Data Button Below to do so...\n";
    		a2EnterAdditionalData.setVisible(true);
    	}
    	a2TextAreaConsoleX2.setText(oReport);
    	
    }
    /**
     *  Generates top 5 names for the 5th Task
     */
    @FXML
    void t5_computeTop5() {
    	int int_n = 5;
    	int int_year = Integer.parseInt(t5YOB.getText());
    	AnalyzeNames analyze_obj = new AnalyzeNames(); 
    	String []  top_male_names = new String[int_n];
    	String []  top_female_names = new String[int_n];
    	int [] top_male_occurences = new int[int_n];
    	int [] top_female_occurences = new int[int_n];
    	String []  top_male_percentages = new String[int_n];
    	String [] top_female_percentages = new String[int_n];
    	int [] top_male_ranks = new int[int_n];
    	int [] top_female_ranks = new int[int_n];
    	int all_males = 0 ; 
    	int all_females = 0 ;
    	all_males = analyze_obj.getTotalMales(int_year);
    	all_females = analyze_obj.getTotalFemales(int_year);
    	String male_gender = "M";
    	String female_gender = "F";
    	String test_output = "";
    	
    	for (int i=0 ; i<int_n ; i++) {
    		top_male_ranks[i] = i+1;
    		top_female_ranks[i] = i+1 ; 
    		top_male_names[i] = analyze_obj.getName(int_year , i+1 , male_gender);
    		top_female_names[i] = analyze_obj.getName(int_year , i+1 , female_gender);
    		top_male_occurences[i] = analyze_obj.getOccurance(int_year, top_male_names[i], male_gender);
    		System.out.println(top_male_occurences[i]);
    		top_female_occurences[i] = analyze_obj.getOccurance(int_year, top_female_names[i], female_gender);
    		float mp = ((float)top_male_occurences[i]/all_males)*100;
    		float fp = ((float)top_female_occurences[i]/all_females)*100;
    		top_female_percentages[i] = String.format("%.2f%%", fp);
    		top_male_percentages[i] = String.format("%.2f%%", mp);
    	}
    	for(int i= 0 ; i<int_n ; i++) {
    		test_output+= String.format("%d %s %d %s\n",top_male_ranks[i] ,top_male_names[i], top_male_occurences[i] , top_male_percentages[i]);
    	}
    	for(int i= 0 ; i<int_n ; i++) {
    		test_output+= String.format("%d %s %d %s\n",top_female_ranks[i] ,top_female_names[i], top_female_occurences[i] , top_female_percentages[i]);
    	}
    	System.out.println(test_output);
    	T1Names []  male_data = new T1Names[int_n];
		T1Names [] female_data = new T1Names[int_n];
		for(int i=0 ; i <int_n ; i++) {
    		male_data[i] = new T1Names(top_male_ranks[i], top_male_names[i] , top_male_occurences[i] , top_male_percentages[i]);
    		female_data[i] = new T1Names(top_female_ranks[i], top_female_names[i] , top_female_occurences[i] , top_female_percentages[i]);
    	}
		int total_top_males = 0 ; 
    	int total_top_females = 0 ;
    	for(int i = 0 ; i<int_n ; i++) {
    		total_top_males += male_data[i].getOccurences();
    		total_top_females += female_data[i].getOccurences();
    	}
    	
    	if(t5GenderMate.getText().contentEquals("M")) {
			ObservableList<PieChart.Data> pieChartDataMale= FXCollections.observableArrayList();
			for(T1Names one_name : male_data) {
				if(one_name!=null) {
					pieChartDataMale.add(new PieChart.Data(one_name.getName(), (float)(one_name.getOccurences()*100.0/total_top_males)));
				}
			}
			t5X1PieChart.setData(pieChartDataMale);
			t5X1PieChart.setStartAngle(90);
			
			t5X1PieChart.getData().forEach(data -> {
			    String percentage = String.format("%.1f%%", (data.getPieValue()));
			    Tooltip toolTip = new Tooltip(percentage);
			    Tooltip.install(data.getNode(), toolTip);
			});
			
    	} else {
			ObservableList<PieChart.Data> pieChartDataFemale= FXCollections.observableArrayList();
			for(T1Names one_name : female_data) {
				if(one_name!=null) {
					pieChartDataFemale.add(new PieChart.Data(one_name.getName(), (float)(one_name.getOccurences()*100.0/total_top_females)));
				}
			}
			t5X1PieChart.setData(pieChartDataFemale);
			t5X1PieChart.setStartAngle(90);
    	}
    	
    }
    /**
     *  Compute results for the second algorithm T5X2
     */
    @FXML
    void a2ComputeResultsTX2() {
    	ErrorLabel1.setVisible(false);
    	ErrorLabel2.setVisible(false);
    	ErrorLabel3.setVisible(false);
    	
    	
    	boolean isPreferenceYounger = false;
    	String iPreference = t5Preference.getText();
		if(iPreference.contentEquals("Younger")) {
			isPreferenceYounger = true;
		}
		else if (iPreference.contentEquals("Older")) {
			isPreferenceYounger = false;
		}
		
    	boolean err = false;
    	
    	int randInt1=0;
    	try {
    		if(t5RandInt1.getText() .equals("")) {
    			throw new Exception("Error: Random Number has\n not been inputted\n");
    		}
    		randInt1 = Integer.parseInt(t5RandInt1.getText());
    		if(randInt1 < 1 || randInt1 > 9) {
    			throw new Exception("Invalid Random Number:\n Number Out of Range\n");
    		}
    	}
    	catch (NumberFormatException e) {
    		ErrorLabel1.setVisible(true);
    		ErrorLabel1.setText(String.format("Please input valid Random Number\n(Integer Value between 1 and 9)\n"));
    		err=true;
    	}
    	catch (Exception e) {
    		ErrorLabel1.setVisible(true);
    		ErrorLabel1.setText(e.getMessage());
    		err=true;
    	}
    	

//    	Color favColor = t5FavouriteColour.getValue();
//		if(favColor.getBrightness() > 0.85 && favColor.getSaturation() <0.15) {
//			err=true;
//			ErrorLabel2.setVisible(true);
//			ErrorLabel2.setText("Colour too light,\n Please choose a darker Colour");
//		}
    	
    	
    	int randInt2=0;
    	try {
    		if(t5RandInt2.getText() .equals("")) {
    			throw new Exception("Error: Random Number has\n not been inputted\n");
    		}
    		randInt2 = Integer.parseInt(t5RandInt2.getText());
    		if(randInt2 < 1 || randInt2 > 50) {
    			throw new Exception("Invalid Random Number:\n Number Out of Range\n");
    		}
    	}
    	catch (NumberFormatException e) {
    		ErrorLabel3.setVisible(true);
    		ErrorLabel3.setText(String.format("Please input valid Random Number\n(Integer Value between 1 and 30)\n"));
    		err=true;
    	}
    	catch (Exception e) {
    		ErrorLabel3.setVisible(true);
    		ErrorLabel3.setText(e.getMessage());
    		err=true;
    	}
    	
    	if(!err) {
    		a2TabPane.getSelectionModel().select(a2ResultsX2);
    	}

    }
    /**
     *  Transfers control to the additional data page
     */
    @FXML
    void a2EnterAdditionalData() {

    	ErrorLabel1.setVisible(false);
    	ErrorLabel2.setVisible(false);
    	ErrorLabel3.setVisible(false);
    	
//    	boolean isPreferenceYounger = false;
//    	String iPreference = t5Preference.getText();
//		if(iPreference.contentEquals("Younger")) {
//			isPreferenceYounger = true;
//		}
//		else if (iPreference.contentEquals("Older")) {
//			isPreferenceYounger = false;
//		}
//		
//		int RandomRange = 1;
//		if(isPreferenceYounger) {
//			RandomRange = 2019-Integer.parseInt(t5YOB.getText())+1;
//		} else {
//			RandomRange = Integer.parseInt(t5YOB.getText()) - 1880 + 1;
//		}
//    	RandomNumberLabel.setText(String.format("Enter Random Number between 1 and %d:", RandomRange));
    	a2TabPane.getSelectionModel().select(a2AdditionalData);
    
    }
    /**
     *  Transfers control to the pie chart tab for the TX2 tab
     */
    @FXML
    void a2ResultsNextX2() {
    	a2TabPane.getSelectionModel().select(A2PieTab);
    }
    
    /**
     *  Displays the results for the T5X2 algorithm
     */
    @FXML
    void a2ResultsX2() {
    	T2Names.resetbirthCount();

		t2PieChartX2.setAnimated(false);
    	
    	boolean isPreferenceYounger = false;
    	String iPreference = t5Preference.getText();
		int RandInt1 = Integer.parseInt(t5RandInt1.getText());
		int RandInt2 = Integer.parseInt(t5RandInt2.getText());
		int iYOB = Integer.parseInt(t5YOB.getText());
		String oReport = "";
		
		Color favColor = t5FavouriteColour.getValue();
		textAreaResults.setTextFill(favColor);
		a2ResultName.setTextFill(favColor);
		Color contrastingColour = new Color(1.0-favColor.getRed(),1.0-favColor.getGreen(), 1.0-favColor.getBlue(), 1.0);
    	
    	ResultsX2Background.setFill(contrastingColour);
		
		
		RandInt2 = ((RandInt1 * RandInt2 + iYOB)/20)%30 + 1;
		RandInt1+=2;
//		int ending_Year;
		T2Names [] result = null;
		if(iPreference.contentEquals("Younger")) {
			if(iYOB+RandInt1 > 2019) {
				iYOB-=2;
				RandInt1 = 2019-iYOB;
			}
//			oReport += String.format("Starting Year: %d, Ending Year: %d, K: %d\n", iYOB, iYOB+RandInt1, RandInt2 );
			result = AnalyzeNames.getKthPopularNames(iYOB, iYOB+RandInt1, RandInt2, t5GenderMate.getText());
		}
		else if (iPreference.contentEquals("Older")) {
//			oReport += String.format("Starting Year: %d, Ending Year: %d, K: %d\n", iYOB-RandInt1, iYOB, RandInt2);
			result = AnalyzeNames.getKthPopularNames(iYOB-RandInt1, iYOB, RandInt2, t5GenderMate.getText());
		}
//		result[0].setPercentage();
    	oReport += String.format("Our Patented Formula has been applied and its results have been processed...\n");
    	oReport += String.format("Your compatible pair will most likely be called ...\n\n\n\n");
    	oReport += String.format("To view the probabilities of your most likely compatible pair, please press the Next button...\n");
    	textAreaResults.setText(oReport);
    	a2ResultName.setText(result[0].getName());
    	
    	
		ObservableList<PieChart.Data> pieChartData= FXCollections.observableArrayList();
		for(T2Names nam : result) {
			if(nam!=null) {
				pieChartData.add(new PieChart.Data(nam.getName(), (float)(nam.getOccurances()*100.0/T2Names.getbirthCount())));
			}
		}
		t2PieChartX2.setData(pieChartData);
		t2PieChartX2.setStartAngle(90);
		t2PieChartX2.layout();
		t2PieChartX2.getData().forEach(data -> {
		    String percentage = String.format("%.1f%%", (data.getPieValue()));
		    Tooltip toolTip = new Tooltip(percentage);
		    Tooltip.install(data.getNode(), toolTip);
		});
    	
    }
    

    @FXML
    /**
     *  Generates results for the second task
     */
    void t2GenerateResults() {
    	//Reset T2Names Static Variable
    	T2Names.resetbirthCount();
    	//Reset bar chart data set
		t2BarChart.getData().clear();
		t2LineChart.getData().clear();
		t2BarChart.setAnimated(false);
		t2PieChart.setAnimated(false);
		t2LineChart.setAnimated(false);
    	t2DataDisplayLabel.setTextFill(Color.BLACK);
		t2Year1.setStyle("-fx-border-width: 0px ;");
		t2Year2.setStyle("-fx-border-width: 0px ;");
		t1Pop.setStyle("-fx-border-width: 0px ;");
		t1Gender.setStyle("-fx-border-width: 0px ;");
    	
//    	textAreaConsole.setText("Testing T2");
    	String oReport = "";
    	boolean err = false;
    	
    	//Validate and Input Starting Year
    	int starting_Year=0;
    	try {
    		if(t2Year1.getText().equals("")) {
    			throw new Exception("Error: Starting Year of Interest has not been inputted\n");
    		}
    		starting_Year = Integer.parseInt(t2Year1.getText());
    		if(starting_Year < 1880 || starting_Year > 2019) {
    			throw new Exception("Invalid Starting Year of Interest: Year Out of Range\n");
    		}
    	}
    	catch (NumberFormatException e) {
    		t2Year1.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += "Please input valid Starting Year of Interest (Integer Value between 1880 and 2019)\n";
    		err=true;
    	}
    	catch (Exception e) {
    		t2Year1.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	//Validate and Input Ending Year
    	
    	int ending_Year = 0;
    	try {
    		if(t2Year2.getText().equals("")) {
    			throw new Exception("Error: Ending Year of Interest has not been inputted\n");
    		}
    		ending_Year = Integer.parseInt(t2Year2.getText());
    		if(ending_Year < 1880 || ending_Year > 2019) {
    			throw new Exception("Invalid Ending Year of Interest: Year Out of Range\n");
    		}
    		else if (ending_Year<starting_Year) {
    			throw new Exception("Invalid Ending Year of Interest: Ending Year of Interest is less than Starting Year of Interest\n");
    		}
    	}
    	catch (NumberFormatException e) {
    		t2Year2.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += "Please input valid Ending Year of Interest (Integer Value between 1880 and 2019)\n";
    		err=true;
    	}
    	catch (Exception e) {
    		t2Year2.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += e.getMessage();
    		err=true;
    	}
    	

    	//Validate and Input K
    	
    	int k = 0;
    	try {
    		if(t1Pop.getText().equals("")) {
    			throw new Exception("Error: K-th Popular Name to Be Reported has not been inputted\n");
    		}
    		k = Integer.parseInt(t1Pop.getText());
    		if(k < 1 || k > 1000) {
    			throw new Exception("Invalid K-th Popular Name to Be Reported: K-th Value out of range\n");
    		}
    	}
    	catch (NumberFormatException e) {
    		t1Pop.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += "Please input valid K-th Popular Name to Be Reported (Integer Value between 1 and 1000)\n";
    		err=true;
    	}
    	catch (Exception e) {
    		t1Pop.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += e.getMessage();
    		err=true;
    		
    	}
    	
    	//Validate and Input Gender

		String genderOut = "";
    	String gender = t1Gender.getText();
    	try {
    		if(gender.equals("")) {
    			throw new Exception("Error: Gender has not been inputted\n");
    		}
    		if(gender.contentEquals("M")) {
    			genderOut="boys";
    		}
    		else if (gender.contentEquals("F")) {
    			genderOut="girls";
    		}
    		else {
    			throw new Exception("Invalid Gender: Gender can either be 'M' or 'F'\n");
    		}
    	}
    	catch (Exception e) {
    		t1Gender.setStyle("-fx-text-box-border: red ; -fx-border-width: 4px ;");
    		oReport += e.getMessage();
    		err=true;
    	}
    	
    	//Validate and Input Report Selection
    	
    	boolean summary = t2Summary.isSelected();
    	boolean datatable = t2DataTable.isSelected();
    	boolean barchart = t2BarChartCheck.isSelected();
    	boolean piechart = t2PieChartCheck.isSelected();
    	boolean linechart = t2LineCheck.isSelected();
    
    	if(!(summary | datatable | barchart | piechart | linechart)) {
        	t2DataDisplayLabel.setTextFill(Color.RED);
    		oReport += "Error: No Data Reporting Method has been Chosen (Please select required reports using the checkbox)\n";
    		err=true;
    	}
    	T2Names [] result = null;
    	if(!err) {
        	t2SummaryTab.setDisable(!summary);
        	t2DataTableTab.setDisable(!datatable);
        	t2BarChartTab.setDisable(!barchart);
        	t2PieChartTab.setDisable(!piechart);
        	t2LineChartTab.setDisable(!linechart);
	    	oReport += String.format("Please view requested Reports in respective tab(s)");
	    	result = AnalyzeNames.getKthPopularNames(starting_Year, ending_Year, k, gender);

	    	t2Name.setCellValueFactory(new PropertyValueFactory<T2Names,String>("name"));
	    	t2Frequency.setCellValueFactory(new PropertyValueFactory<T2Names,Integer>("frequency"));
	    	t2Occurances.setCellValueFactory(new PropertyValueFactory<T2Names,Integer>("occurances"));
	    	t2Percentage.setCellValueFactory(new PropertyValueFactory<T2Names,String>("percentage"));
	    	if(result!=null) {
	        	t2ConsoleTab.setStyle("-fx-text-base-color: black;");
	    		if(summary) {
	    			String summ="";
	    			summ+= String.format("%s has held the %d-th rank most often for a total of %d times among names registered for baby %s born in the period from %d to %d.The total number of occurrences of %s is %,d, which represents %s of total female births at the %d-th rank in the period from %d to %d.", result[0].getName(), k, result[0].getFrequency(), genderOut, starting_Year, ending_Year,result[0].getName(), result[0].getOccurances(), result[0].getPercentage(), k, starting_Year, ending_Year);
	    
	    	    	textAreaSummary.setText(summ);
	    			
	    		}
	    		if(datatable) {
	    			t2ReportTable.setItems(getNames(result));
	    			t2TotFreq.setText(String.format("%d",ending_Year-starting_Year+1));
	    			t2TotOcc.setText(String.format("%d",T2Names.getbirthCount()));
	    			t2TotPerc.setText(String.format("100.0%%"));
	    		}
	    		if(barchart) {
	    			t2BarChart.setTitle(String.format("%d-th Most Popular Names Between %d to %d", k, starting_Year, ending_Year));
	    			XYChart.Series<String, Integer> set1 = new XYChart.Series<>();
	    			for (T2Names nam : result) {
	    				if(nam!=null) {
	    					set1.getData().add(new XYChart.Data<>(nam.getName(), nam.getOccurances()));
	    				}
	    			}
	    			t2BarChart.getData().addAll(set1);
	    		}
	    		if(piechart) {
	    			ObservableList<PieChart.Data> pieChartData= FXCollections.observableArrayList();
	    			for(T2Names nam : result) {
	    				if(nam!=null) {
	    					pieChartData.add(new PieChart.Data(nam.getName(), (float)(nam.getOccurances()*100.0/T2Names.getbirthCount())));
	    				}
	    			}
	    			t2PieChart.setData(pieChartData);
	    			t2PieChart.setStartAngle(90);
	    			
	    			t2PieChart.getData().forEach(data -> {
	    			    String percentage = String.format("%.1f%%", (data.getPieValue()));
	    			    Tooltip toolTip = new Tooltip(percentage);
	    			    Tooltip.install(data.getNode(), toolTip);
	    			});
	    		}
	    		if(linechart) {
	    			T3Names[] popTrend = null;
	    			t2LineChart.setTitle(String.format("Occurance Trend for %d-th Popular Names during Years of Interest", k));
	    			for(T2Names nam : result) {
	    				if(nam!=null) {
			    	    	popTrend = AnalyzeNames.getPopularityOfNames(starting_Year, ending_Year, nam.getName(), gender);
			    	    	XYChart.Series<String, Integer> set1 = new XYChart.Series<>();
			    	    	int year = starting_Year;
			    	    	for(T3Names pop : popTrend) {
			    	    		if(pop.name!="") {
			    					set1.getData().add(new XYChart.Data<>(String.valueOf(year), pop.occurances));
			    	    		}
			    	    		year++;
			    	    	}
			    	    	set1.setName(nam.getName());
			    	    	t2LineChart.getData().add(set1);
	    				}
	    			}
	    		}
	    	}
    	} else {
        	t2SummaryTab.setDisable(true);
        	t2DataTableTab.setDisable(true);
        	t2BarChartTab.setDisable(true);
        	t2PieChartTab.setDisable(true);
        	t2LineChartTab.setDisable(true);
        	t2ConsoleTab.setStyle("-fx-text-base-color: red;");
        	t2TabPane.getSelectionModel().select(t2ConsoleTab);
        	
    	}
    	textAreaConsole.setText(oReport);
    }
    /**
     *  Generates results for the 3rd data reporting task 
     */

    @FXML
    void T3GenerateResults()
    {		
    	T3BarChartDisplay.getData().clear();
    	T3LineChartDisplay.getData().clear();
    	System.out.println("T3GenerateResults Executed");
    	String consoleOutput = "";
    	boolean inputError = false;
    	
    	//Validation of Starting Year 
    	int startYear=0;
    	try {
    		if(T3StartYearInput.getText() =="") {
    			throw new Exception("Error: Please enter the starting year\n");
    		}
    		
    		startYear = Integer.parseInt(T3StartYearInput.getText());
    		if(startYear < 1880 || startYear > 2019) {
    			throw new Exception("Error: Invalid starting year. Please input an year between 1880 and 2019.\n");
    		}
    	}
    	catch (NumberFormatException e) {
    		consoleOutput += "Error: The starting year is not an integer. Please enter an integer.\n";
    		inputError=true;
    	}
    	catch (Exception e) {
    		consoleOutput += e.getMessage();
    		inputError=true;
    	}
    	System.out.println("T3GenerateResults Executed 1");
    	//Validation of End Year
    	int endYear=0;
    	try {
    		if(T3EndYearInput.getText() =="") {
    			throw new Exception("Error: Please enter the end year\n");
    		}
    		endYear = Integer.parseInt(T3EndYearInput.getText());
    		if(endYear < 1880 || endYear > 2019) {
    			throw new Exception("Error: Invalid end year. Please input an year between 1880 and 2019.\n");
    		}
    	}
    	catch (NumberFormatException e) {
    		consoleOutput += "Error: The end year is not an integer. Please enter an integer.\n";
    		inputError=true;
    	}
    	catch (Exception e) {
    		consoleOutput += e.getMessage();
    		inputError=true;
    	}
    	
    	//Validation of Gender
		String genderOut = "";
    	String gender = T3GenderInput.getText();
    	try {
    		if(gender =="") {
    			throw new Exception("Error: Please enter the gender.\n");
    		}
    		if(gender.contentEquals("M")) {
    			genderOut="boys";
    		}
    		else if (gender.contentEquals("F")) {
    			genderOut="girls";
    		}
    		else {
    			throw new Exception("Error: Please enter the a valid gender, 'M' or 'F'.\n");
    		}
    	}
    	catch (Exception e) {
    		consoleOutput += e.getMessage();
    		inputError=true;
    	}
    	
    	//Validation of Name
    	String name = T3NameInput.getText();
    	name = name.replace(" ", "");
    	int nameLength = name.length();
    	
    	try {
    		if(nameLength > 15 || nameLength < 2)
    		{
    			throw new Exception("Error: Please enter a name containing 2 to 15 letters.\n");
    		}
    	}
    	catch(Exception e)
    	{
    		consoleOutput += e.getMessage();
    		inputError = true;
    	}
    	
    	//CheckBox Validation
    	System.out.println("T3GenerateResults Executed 2");
    	boolean summary = T3SummaryCheckBox.isSelected();
    	System.out.println("T3GenerateResults Executed 3");
    	boolean datatable = T3DataTableCheckBox.isSelected();
    	boolean barchart = T3BarChartCheckBox.isSelected();
    	boolean linechart = T3LineChartCheckBox.isSelected();
       	if(!(summary | datatable | barchart | linechart)) {
    		consoleOutput += "Error: Please choose one of the data reporting methods offered above.\n";
    		inputError=true;
    	}
    	
       	// ============= Data Reporting ===============
       	
       	T3Names Result[] = null;
       	if(inputError == false)
       	{
        	T3SummaryTab.setDisable(!summary);
        	T3DataTable.setDisable(!datatable);
        	T3BarChart.setDisable(!barchart);
        	T3LineChart.setDisable(!linechart);
        	consoleOutput += "The data reports will be visible in their respective tabs. Please click on the tabs to view.\n";
        	//Analyze and calculate the results
	    	Result = AnalyzeNames.getPopularityOfNames(startYear, endYear, name, gender);
	    	System.out.println(Result);
	    	if(Result != null)
	    	{
	    		int maxIndex = 0;
	    		T3Names maxName = new T3Names("", 0, "0.0", 0, 0, 0);
	    		int maxOccurances = 0;
	    		for(int i = 0;i<endYear-startYear+1;i++)
	    		{
	    			if(Result[i].occurances >= maxOccurances)
	    			{
	    				maxIndex = i;
	    				maxName = new T3Names(Result[i].name, Result[i].occurances, Result[i].percentage, Result[i].rank, Result[i].birthCount, i+startYear);
	    				maxOccurances = Result[i].occurances;
	    			}
	    		}
	    		//Summary
	    		if(summary) {
	    			String summaryContent = "";
	    			summaryContent += String.format("The year when the name %s was most popular is %d at rank %d. In that year, the\r\n" + 
	    					"number of occurrences is %d, which represents %s of total male births in %d.", name, maxIndex+startYear, maxName.rank, maxName.occurances, maxName.percentage, maxIndex+startYear);
	    			T3SummaryDisplay.setText(summaryContent);
	    		}
	    		//BarChart
	    		if(barchart) {
	    			T3BarChartDisplay.setTitle(String.format("Popularity of %s from %d to %d", name, startYear, endYear));
	    			XYChart.Series<String, Integer> set1 = new XYChart.Series<>();
	    			int year = startYear;
	    			for (T3Names nam : Result) {
	    				if(nam.name!="") {
	    					set1.getData().add(new XYChart.Data<>(String.valueOf(year), nam.occurances));
	    				}
	    				year++;
	    			}
	    			T3BarChartDisplay.getData().addAll(set1);
	    		}
	    		//DataTable
	    		if(datatable) {

	    	    	T3Year.setCellValueFactory(new PropertyValueFactory<T3Names,Integer>("year"));
	    	    	T3Rank.setCellValueFactory(new PropertyValueFactory<T3Names,Integer>("rank"));
	    	    	T3Occurances.setCellValueFactory(new PropertyValueFactory<T3Names,Integer>("occurances"));
	    	    	T3Percentage.setCellValueFactory(new PropertyValueFactory<T3Names,String>("percentage"));   
	    			T3DataTableDisplay.setItems(T3getNames(Result)); 
	    		}
	    		
	    		//LineChart
	    		if(linechart) {
	    			T3LineChartDisplay.setTitle(String.format("Popularity of %s from %d to %d", name, startYear, endYear));
	    			XYChart.Series<String, Integer> set1 = new XYChart.Series<>();
	    			int year = startYear;
	    			for (T3Names nam : Result) {
	    				if(nam.name!="") {
	    					set1.getData().add(new XYChart.Data<>(String.valueOf(year), nam.occurances));
	    				}
	    				year++;
	    			}
	    			T3LineChartDisplay.getData().addAll(set1);	
	    		}
	    	}
	    	else
	    	{
	        	T3SummaryTab.setDisable(true);
	        	T3DataTable.setDisable(true);
	        	T3BarChart.setDisable(true);
	        	T3LineChart.setDisable(true);
	        	T3ConsoleTab.setStyle("-fx-text-base-color: red;");
	        	T3TextAreaConsole.setStyle("-fx -text-base-color: blue;");
	    	}
       	}
       	if(inputError)
       	{
        	T3SummaryTab.setDisable(true);
        	T3DataTable.setDisable(true);
        	T3BarChart.setDisable(true);
        	T3LineChart.setDisable(true);
    		T3ConsoleTab.setStyle("-fx-text-base-color: red;");
    		T3ResultsTabPane.getSelectionModel().select(T3ConsoleTab);
       		T3TextAreaConsole.setStyle("-fx-text-base-color: red;");
    	}
       	else
       	{
       		T3ConsoleTab.setStyle("-fx-text-base-color: black;");
       	}
       	T3TextAreaConsole.setText(consoleOutput);
    }
    /**
     *  Does the input validation for the 6th task
     *  @return True if the input is validated and False if the input is not validated 
     */

    
    boolean T6InputValidation() {
    	//Input Validation
    	String consoleOutput = "";
    	boolean inputError = false;
    	
    	//Validation of Year 
    	int YOB=0;
    	try {
    		if(T6iYOBInput.getText() =="") {
    			throw new Exception("Error: Please enter your year of birth\n");
    		}
    		
    		YOB = Integer.parseInt(T6iYOBInput.getText());
    		if(YOB < 1880 || YOB > 2019) {
    			throw new Exception("Error: Invalid year or birth. Please input an year between 1880 and 2019.\n");
    		}
    	}
    	catch (NumberFormatException e) {
    		consoleOutput += "Error: The year of birth is not an integer. Please enter an integer.\n";
    		inputError=true;
    	}
    	catch (Exception e) {
    		consoleOutput += e.getMessage();
    		inputError=true;
    	}
    	
    	
    	//Validation of iGender
		String igenderOut = "";
    	String iGender = T6iGenderInput.getText();
    	try {
    		if(iGender =="") {
    			throw new Exception("Error: Please enter the gender.\n");
    		}
    		if(iGender.contentEquals("M")) {
    			igenderOut="boys";
    		}
    		else if (iGender.contentEquals("F")) {
    			igenderOut="girls";
    		}
    		else {
    			throw new Exception("Error: Please enter the a valid gender, 'M' or 'F'.\n");
    		}
    	}
    	catch (Exception e) {
    		consoleOutput += e.getMessage();
    		inputError=true;
    	}
    	
    	//Validation of iMateGender
		String iMategenderOut = "";
    	String iMateGender = T6iGenderMateInput.getText();
    	try {
    		if(iMateGender =="") {
    			throw new Exception("Error: Please enter the gender.\n");
    		}
    		if(iMateGender.contentEquals("M")) {
    			iMategenderOut="boys";
    		}
    		else if (iMateGender.contentEquals("F")) {
    			iMategenderOut="girls";
    		}
    		else {
    			throw new Exception("Error: Please enter the a valid gender, 'M' or 'F'.\n");
    		}
    	}
    	catch (Exception e) {
    		consoleOutput += e.getMessage();
    		inputError=true;
    	}
    	
    	//Validation of preference
    	try 
    	{
	    	String iPreference = T6iPreferenceInput.getText();
			if(iPreference.contentEquals("Younger") == false && iPreference.contentEquals("Older") == false) {
				throw new Exception("Please enter 'Younger' or 'Older' as the age preference");
			}
    	}
    	catch(Exception e)
    	{
    		consoleOutput += e.getMessage();
    	}
    	
    	//Validation of Variability
    	try {
    		if(T6VariabilityInput.getText() =="") {
    			throw new Exception("Error: Please enter a variability allowance.\n");
    		}
    		int variability = Integer.parseInt(T6VariabilityInput.getText());
    		if(variability < 1 || variability > 10) {
    			throw new Exception("Error: Invalid variability allowance. Please input a number between 1 and 10.\n");
    		}
    	}
    	catch(NumberFormatException e) {
    		consoleOutput += "Error: The variability allowance entered is not an integer. Please enter an integer.\n";
    		inputError=true;
    	}
    	catch(Exception e)
    	{
    		consoleOutput += e.getMessage();
    		inputError = true;
    	}

       	T6TextAreaConsole.setText(consoleOutput);

    	if(!inputError)
    	{
    		return false;
    	}
    	return true;
    }
    /**
     *  Does the input validation for the 6th Name entered
     *  @return True if the input is validated and False if the input is not validated 
     */

    
    boolean T6NameInputValidation() {
    	boolean error = false;
    	String consoleOutput = "";
    	try {
    		if(T6iNameInput.getText() == "")
    		{
    			error = true;
    			throw new Exception("Error: Please enter your name.\n");
    		}
    		if(T6iNameMateInput.getText() == "") {
    			error = true;
    			throw new Exception("Error: Please enter your desired mate's name.\n");
    		}
    	}
    	catch(Exception e) {
    		consoleOutput = e.getMessage();
    	}
		T6TextAreaConsole.setText(consoleOutput);
		return error;
    }
    /**
     * Analyze and generate results for T6X1
     *  
     */

    @FXML
    void T6ComputeT6X1() {
    	//Analyze and generate results for T6X1
    	boolean inputError = T6NameInputValidation();
    	String output = "";
    	if(!inputError)
    	{
    		int oScore = 0;
    		String iName = T6iNameInput.getText();
    		iName = iName.replace(" ", "");
    		String iMateName =  T6iNameMateInput.getText();
    		iMateName = iMateName.replace(" ", "");
    		if(iName.length() == iMateName.length())
    		{
    			oScore = 100;
    			output = "Congratulations! You are compatible with your partner! You have a compatibility oScore of 100%\n";
    		}
    		else {
    			output = "Alas! You are not compatible with your partner. You have a compatibility oScore of 0%\n";
    		}
    		T6TextAreaConsole.setText(output);
    	}
    	else
    	{
       		T6TextAreaConsole.setStyle("-fx-text-base-color: red;");
    	}
    }
    /**
     * Analyze and generate results for T6X2
     */

    @FXML
    void T6ComputeT6X2() {
    	//Analyze and generate results for T6X2
    	boolean inputError = T6InputValidation();
    	T6LineChartDisplay.getData().clear();
    	String consoleOutput = "";
    	System.out.println(inputError);
    	if(!inputError)
    	{
	    	String iPreference = T6iPreferenceInput.getText();
	    	String iMateGender = T6iGenderMateInput.getText();
	    	String iMateName = T6iNameMateInput.getText();
	    	String iname = T6iNameInput.getText();
	    	String iGender = T6iGenderInput.getText();
	    	int variability = Integer.parseInt(T6VariabilityInput.getText());
	    	int YOB = Integer.parseInt(T6iYOBInput.getText());
	    	int startYear = 1880;
	    	int endYear = 2019;
	    	if(iPreference.contentEquals("Younger"))
	    	{
	    		endYear = YOB;
	    	}
	    	else 
	    	{
	    		startYear = YOB;
	    	}
    		T3Names [] mateNames = AnalyzeNames.T6getNames(startYear, endYear, iMateGender, iMateName);
    		T3Names iName = AnalyzeNames.T6getiName(iname, iGender, YOB);
    		double averagePercentage = 0.0;
    		double iPercentage = Double.parseDouble(iName.percentage);
    		for(int i = 0; i<endYear-startYear+1;i++)
    		{
    			System.out.println(mateNames[i].percentage);
    			averagePercentage += Double.parseDouble(mateNames[i].percentage);
    		}
    		averagePercentage = averagePercentage/(endYear-startYear+1);
    		double marginPercentage = 1.0*variability;
    		System.out.println("average percentage = "+ averagePercentage);
    		System.out.println("average percentage = "+ iPercentage);

    		T3LineChartDisplay.setTitle(String.format("Percentage of the name '%s' over the years", iMateName));
			XYChart.Series<String, Double> set1 = new XYChart.Series<>();
			XYChart.Series<String, Double> set2 = new XYChart.Series<>();

			int year = startYear;
			for (T3Names name : mateNames) {
				
				set1.getData().add(new XYChart.Data<>(String.valueOf(year), Double.parseDouble(name.percentage)));
				set2.getData().add(new XYChart.Data<>(String.valueOf(year), averagePercentage));
				year++;
			}
			T6LineChartDisplay.getData().addAll(set1);
			T6LineChartDisplay.getData().addAll(set2);
			String LesserOrGreater = "lesser";
			if(iPreference == "Older")
			{
				LesserOrGreater = "greater";
			}
			double percentageDifference = (averagePercentage - iPercentage < 0)? -1*(averagePercentage - iPercentage): averagePercentage - iPercentage;
			double oScore = 0.0;
    		if(percentageDifference <= marginPercentage) 
    		{
    			oScore = 100.0 - (percentageDifference/marginPercentage)*100;
    			
        		consoleOutput += "According to many astrologers, two individuals are more likely be partners if their names have a similar amount of popularity in the "
        				+ "years they were born. This links to the psychological working of the family of the individuals because they named them. 'The way people choose names tells "
        				+ "a lot about their personality', say these astrologers.\nthe popularity of name in a prticular year can be linked to its percentage. Therefore, becasue "
        				+ "you chose "+ String.valueOf(iPreference) + " as your preference, the algorithm calculated the average percentage of the name "
        				+ iMateName + " over the years " + LesserOrGreater + " than " + String.valueOf(YOB) + "(your YOB).\nAverage Percentage of Mate's Name = " + String.valueOf(averagePercentage)
        				+ "\nPercentage of your name for year " + String.valueOf(YOB) + " = " + String.valueOf(iPercentage) + ".\nThe variability is then used to set the margin beyond which the compatibility is 0.0%."+
        				"In this case, the variability is " + String.valueOf(marginPercentage) + "%.\n Therefore, the oScore is percentage deviation of the popularity of your mate's name and the popularity of your name in the "
        						+ "given variability range./nYour oScore = " +String.valueOf(oScore)+".\nYou would be " + String.valueOf(oScore) + "% compatible with your desired mate."; 
    		}
    		else
    		{
    			consoleOutput += "According to many astrologers, two individuals are more likely be partners if their names have a similar amount of popularity in the "
        				+ "years they were born. This links to the psychological working of the family of the individuals because they named them. 'The way people choose names tells "
        				+ "a lot about their personality', say these astrologers.\nthe popularity of name in a prticular year can be linked to its percentage. Therefore, becasue "
        				+ "you chose "+ String.valueOf(iPreference) + " as your preference, the algorithm calculated the average percentage of the name "
        				+ iMateName + " over the years " + LesserOrGreater + " than " + String.valueOf(YOB) + "(your YOB).\nAverage Percentage of Mate's Name = " + String.valueOf(averagePercentage)
        				+ "\nPercentage of your name for year " + String.valueOf(YOB) + " = " + String.valueOf(iPercentage) + ".\nThe variability is then used to set the margin beyond which the compatibility is 0.0%."+
        				"In this case, the variability is " + String.valueOf(marginPercentage) + "%.\n Therefore, the oScore is percentage deviation of the popularity of your mate's name and the popularity of your name in the "
        						+ "given variability range./nYour oScore = " +String.valueOf(oScore)+". This means that you are not likely to be compatible with the desired mate at all.";
    		}
    		T6TextAreaConsole.setWrapText(true);
    		T6TextAreaConsole.setText(consoleOutput);
    	}
    }
    
    /**
     * generates an ObservableList for the second task
     * @return an ObervableList for the graphs, tables and charts 
     */
    
    public ObservableList<T2Names> getNames(T2Names [] names) {
		ObservableList<T2Names> Names = FXCollections.observableArrayList();
		
		for(T2Names nam : names) {
			if(nam!=null) {
				Names.add(nam);
			}
		}

		
		return Names;
	}
    /**
     * generates an ObservableList for the third task
     * @return an ObervableList for the graphs, tables and charts 
     */
    public ObservableList<T3Names> T3getNames(T3Names [] names) {
		ObservableList<T3Names> Names = FXCollections.observableArrayList();
		
		for(T3Names nam : names) {
			if(nam.occurances != 0) {
				System.out.println(nam.name);
				Names.add(nam);
			}
		}
		return Names;
	}


}
